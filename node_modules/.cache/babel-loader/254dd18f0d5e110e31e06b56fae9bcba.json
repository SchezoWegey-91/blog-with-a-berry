{"ast":null,"code":"/**\n * marked v15.0.7 - a markdown parser\n * Copyright (c) 2011-2025, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.marked = {}));\n})(this, function (exports) {\n  'use strict';\n\n  /**\n   * Gets the original marked default options.\n   */\n  function _getDefaults() {\n    return {\n      async: false,\n      breaks: false,\n      extensions: null,\n      gfm: true,\n      hooks: null,\n      pedantic: false,\n      renderer: null,\n      silent: false,\n      tokenizer: null,\n      walkTokens: null\n    };\n  }\n  exports.defaults = _getDefaults();\n  function changeDefaults(newDefaults) {\n    exports.defaults = newDefaults;\n  }\n  const noopTest = {\n    exec: () => null\n  };\n  function edit(regex) {\n    let opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    let source = typeof regex === 'string' ? regex : regex.source;\n    const obj = {\n      replace: (name, val) => {\n        let valSource = typeof val === 'string' ? val : val.source;\n        valSource = valSource.replace(other.caret, '$1');\n        source = source.replace(name, valSource);\n        return obj;\n      },\n      getRegex: () => {\n        return new RegExp(source, opt);\n      }\n    };\n    return obj;\n  }\n  const other = {\n    codeRemoveIndent: /^(?: {1,4}| {0,3}\\t)/gm,\n    outputLinkReplace: /\\\\([\\[\\]])/g,\n    indentCodeCompensation: /^(\\s+)(?:```)/,\n    beginningSpace: /^\\s+/,\n    endingHash: /#$/,\n    startingSpaceChar: /^ /,\n    endingSpaceChar: / $/,\n    nonSpaceChar: /[^ ]/,\n    newLineCharGlobal: /\\n/g,\n    tabCharGlobal: /\\t/g,\n    multipleSpaceGlobal: /\\s+/g,\n    blankLine: /^[ \\t]*$/,\n    doubleBlankLine: /\\n[ \\t]*\\n[ \\t]*$/,\n    blockquoteStart: /^ {0,3}>/,\n    blockquoteSetextReplace: /\\n {0,3}((?:=+|-+) *)(?=\\n|$)/g,\n    blockquoteSetextReplace2: /^ {0,3}>[ \\t]?/gm,\n    listReplaceTabs: /^\\t+/,\n    listReplaceNesting: /^ {1,4}(?=( {4})*[^ ])/g,\n    listIsTask: /^\\[[ xX]\\] /,\n    listReplaceTask: /^\\[[ xX]\\] +/,\n    anyLine: /\\n.*\\n/,\n    hrefBrackets: /^<(.*)>$/,\n    tableDelimiter: /[:|]/,\n    tableAlignChars: /^\\||\\| *$/g,\n    tableRowBlankLine: /\\n[ \\t]*$/,\n    tableAlignRight: /^ *-+: *$/,\n    tableAlignCenter: /^ *:-+: *$/,\n    tableAlignLeft: /^ *:-+ *$/,\n    startATag: /^<a /i,\n    endATag: /^<\\/a>/i,\n    startPreScriptTag: /^<(pre|code|kbd|script)(\\s|>)/i,\n    endPreScriptTag: /^<\\/(pre|code|kbd|script)(\\s|>)/i,\n    startAngleBracket: /^</,\n    endAngleBracket: />$/,\n    pedanticHrefTitle: /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/,\n    unicodeAlphaNumeric: /[\\p{L}\\p{N}]/u,\n    escapeTest: /[&<>\"']/,\n    escapeReplace: /[&<>\"']/g,\n    escapeTestNoEncode: /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/,\n    escapeReplaceNoEncode: /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/g,\n    unescapeTest: /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig,\n    caret: /(^|[^\\[])\\^/g,\n    percentDecode: /%25/g,\n    findPipe: /\\|/g,\n    splitPipe: / \\|/,\n    slashPipe: /\\\\\\|/g,\n    carriageReturn: /\\r\\n|\\r/g,\n    spaceLine: /^ +$/gm,\n    notSpaceStart: /^\\S*/,\n    endingNewline: /\\n$/,\n    listItemRegex: bull => new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`),\n    nextBulletRegex: indent => new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`),\n    hrRegex: indent => new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`),\n    fencesBeginRegex: indent => new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`),\n    headingBeginRegex: indent => new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`),\n    htmlBeginRegex: indent => new RegExp(`^ {0,${Math.min(3, indent - 1)}}<(?:[a-z].*>|!--)`, 'i')\n  };\n  /**\n   * Block-Level Grammar\n   */\n  const newline = /^(?:[ \\t]*(?:\\n|$))+/;\n  const blockCode = /^((?: {4}| {0,3}\\t)[^\\n]+(?:\\n(?:[ \\t]*(?:\\n|$))*)?)+/;\n  const fences = /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/;\n  const hr = /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/;\n  const heading = /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/;\n  const bullet = /(?:[*+-]|\\d{1,9}[.)])/;\n  const lheadingCore = /^(?!bull |blockCode|fences|blockquote|heading|html|table)((?:.|\\n(?!\\s*?\\n|bull |blockCode|fences|blockquote|heading|html|table))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/;\n  const lheading = edit(lheadingCore).replace(/bull/g, bullet) // lists can interrupt\n  .replace(/blockCode/g, /(?: {4}| {0,3}\\t)/) // indented code blocks can interrupt\n  .replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n  .replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n  .replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n  .replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n  .replace(/\\|table/g, '') // table not in commonmark\n  .getRegex();\n  const lheadingGfm = edit(lheadingCore).replace(/bull/g, bullet) // lists can interrupt\n  .replace(/blockCode/g, /(?: {4}| {0,3}\\t)/) // indented code blocks can interrupt\n  .replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n  .replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n  .replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n  .replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n  .replace(/table/g, / {0,3}\\|?(?:[:\\- ]*\\|)+[\\:\\- ]*\\n/) // table can interrupt\n  .getRegex();\n  const _paragraph = /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/;\n  const blockText = /^[^\\n]+/;\n  const _blockLabel = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\n  const def = edit(/^ {0,3}\\[(label)\\]: *(?:\\n[ \\t]*)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n[ \\t]*)?| *\\n[ \\t]*)(title))? *(?:\\n+|$)/).replace('label', _blockLabel).replace('title', /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/).getRegex();\n  const list = edit(/^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/).replace(/bull/g, bullet).getRegex();\n  const _tag = 'address|article|aside|base|basefont|blockquote|body|caption' + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption' + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe' + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option' + '|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title' + '|tr|track|ul';\n  const _comment = /<!--(?:-?>|[\\s\\S]*?(?:-->|$))/;\n  const html = edit('^ {0,3}(?:' // optional indentation\n  + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n  + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n  + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n  + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n  + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n  + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (6)\n  + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (7) open tag\n  + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (7) closing tag\n  + ')', 'i').replace('comment', _comment).replace('tag', _tag).replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/).getRegex();\n  const paragraph = edit(_paragraph).replace('hr', hr).replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)').replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n  .replace('|table', '').replace('blockquote', ' {0,3}>').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)').replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n  const blockquote = edit(/^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/).replace('paragraph', paragraph).getRegex();\n  /**\n   * Normal Block Grammar\n   */\n  const blockNormal = {\n    blockquote,\n    code: blockCode,\n    def,\n    fences,\n    heading,\n    hr,\n    html,\n    lheading,\n    list,\n    newline,\n    paragraph,\n    table: noopTest,\n    text: blockText\n  };\n  /**\n   * GFM Block Grammar\n   */\n  const gfmTable = edit('^ *([^\\\\n ].*)\\\\n' // Header\n  + ' {0,3}((?:\\\\| *)?:?-+:? *(?:\\\\| *:?-+:? *)*(?:\\\\| *)?)' // Align\n  + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)') // Cells\n  .replace('hr', hr).replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)').replace('blockquote', ' {0,3}>').replace('code', '(?: {4}| {0,3}\\t)[^\\\\n]').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)').replace('tag', _tag) // tables can be interrupted by type (6) html blocks\n  .getRegex();\n  const blockGfm = {\n    ...blockNormal,\n    lheading: lheadingGfm,\n    table: gfmTable,\n    paragraph: edit(_paragraph).replace('hr', hr).replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)').replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n    .replace('table', gfmTable) // interrupt paragraphs with table\n    .replace('blockquote', ' {0,3}>').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)').replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n    .getRegex()\n  };\n  /**\n   * Pedantic grammar (original John Gruber's loose markdown specification)\n   */\n  const blockPedantic = {\n    ...blockNormal,\n    html: edit('^ *(?:comment *(?:\\\\n|\\\\s*$)' + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n    + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))').replace('comment', _comment).replace(/tag/g, '(?!(?:' + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub' + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)' + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b').getRegex(),\n    def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n    heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n    fences: noopTest,\n    // fences not supported\n    lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n    paragraph: edit(_paragraph).replace('hr', hr).replace('heading', ' *#{1,6} *[^\\n]').replace('lheading', lheading).replace('|table', '').replace('blockquote', ' {0,3}>').replace('|fences', '').replace('|list', '').replace('|html', '').replace('|tag', '').getRegex()\n  };\n  /**\n   * Inline-Level Grammar\n   */\n  const escape$1 = /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/;\n  const inlineCode = /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/;\n  const br = /^( {2,}|\\\\)\\n(?!\\s*$)/;\n  const inlineText = /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/;\n  // list of unicode punctuation marks, plus any missing characters from CommonMark spec\n  const _punctuation = /[\\p{P}\\p{S}]/u;\n  const _punctuationOrSpace = /[\\s\\p{P}\\p{S}]/u;\n  const _notPunctuationOrSpace = /[^\\s\\p{P}\\p{S}]/u;\n  const punctuation = edit(/^((?![*_])punctSpace)/, 'u').replace(/punctSpace/g, _punctuationOrSpace).getRegex();\n  // GFM allows ~ inside strong and em for strikethrough\n  const _punctuationGfmStrongEm = /(?!~)[\\p{P}\\p{S}]/u;\n  const _punctuationOrSpaceGfmStrongEm = /(?!~)[\\s\\p{P}\\p{S}]/u;\n  const _notPunctuationOrSpaceGfmStrongEm = /(?:[^\\s\\p{P}\\p{S}]|~)/u;\n  // sequences em should skip over [title](link), `code`, <html>\n  const blockSkip = /\\[[^[\\]]*?\\]\\((?:\\\\.|[^\\\\\\(\\)]|\\((?:\\\\.|[^\\\\\\(\\)])*\\))*\\)|`[^`]*?`|<[^<>]*?>/g;\n  const emStrongLDelimCore = /^(?:\\*+(?:((?!\\*)punct)|[^\\s*]))|^_+(?:((?!_)punct)|([^\\s_]))/;\n  const emStrongLDelim = edit(emStrongLDelimCore, 'u').replace(/punct/g, _punctuation).getRegex();\n  const emStrongLDelimGfm = edit(emStrongLDelimCore, 'u').replace(/punct/g, _punctuationGfmStrongEm).getRegex();\n  const emStrongRDelimAstCore = '^[^_*]*?__[^_*]*?\\\\*[^_*]*?(?=__)' // Skip orphan inside strong\n  + '|[^*]+(?=[^*])' // Consume to delim\n  + '|(?!\\\\*)punct(\\\\*+)(?=[\\\\s]|$)' // (1) #*** can only be a Right Delimiter\n  + '|notPunctSpace(\\\\*+)(?!\\\\*)(?=punctSpace|$)' // (2) a***#, a*** can only be a Right Delimiter\n  + '|(?!\\\\*)punctSpace(\\\\*+)(?=notPunctSpace)' // (3) #***a, ***a can only be Left Delimiter\n  + '|[\\\\s](\\\\*+)(?!\\\\*)(?=punct)' // (4) ***# can only be Left Delimiter\n  + '|(?!\\\\*)punct(\\\\*+)(?!\\\\*)(?=punct)' // (5) #***# can be either Left or Right Delimiter\n  + '|notPunctSpace(\\\\*+)(?=notPunctSpace)'; // (6) a***a can be either Left or Right Delimiter\n  const emStrongRDelimAst = edit(emStrongRDelimAstCore, 'gu').replace(/notPunctSpace/g, _notPunctuationOrSpace).replace(/punctSpace/g, _punctuationOrSpace).replace(/punct/g, _punctuation).getRegex();\n  const emStrongRDelimAstGfm = edit(emStrongRDelimAstCore, 'gu').replace(/notPunctSpace/g, _notPunctuationOrSpaceGfmStrongEm).replace(/punctSpace/g, _punctuationOrSpaceGfmStrongEm).replace(/punct/g, _punctuationGfmStrongEm).getRegex();\n  // (6) Not allowed for _\n  const emStrongRDelimUnd = edit('^[^_*]*?\\\\*\\\\*[^_*]*?_[^_*]*?(?=\\\\*\\\\*)' // Skip orphan inside strong\n  + '|[^_]+(?=[^_])' // Consume to delim\n  + '|(?!_)punct(_+)(?=[\\\\s]|$)' // (1) #___ can only be a Right Delimiter\n  + '|notPunctSpace(_+)(?!_)(?=punctSpace|$)' // (2) a___#, a___ can only be a Right Delimiter\n  + '|(?!_)punctSpace(_+)(?=notPunctSpace)' // (3) #___a, ___a can only be Left Delimiter\n  + '|[\\\\s](_+)(?!_)(?=punct)' // (4) ___# can only be Left Delimiter\n  + '|(?!_)punct(_+)(?!_)(?=punct)', 'gu') // (5) #___# can be either Left or Right Delimiter\n  .replace(/notPunctSpace/g, _notPunctuationOrSpace).replace(/punctSpace/g, _punctuationOrSpace).replace(/punct/g, _punctuation).getRegex();\n  const anyPunctuation = edit(/\\\\(punct)/, 'gu').replace(/punct/g, _punctuation).getRegex();\n  const autolink = edit(/^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/).replace('scheme', /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/).replace('email', /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/).getRegex();\n  const _inlineComment = edit(_comment).replace('(?:-->|$)', '-->').getRegex();\n  const tag = edit('^comment' + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n  + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n  + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n  + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n  + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>') // CDATA section\n  .replace('comment', _inlineComment).replace('attribute', /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/).getRegex();\n  const _inlineLabel = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\n  const link = edit(/^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/).replace('label', _inlineLabel).replace('href', /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/).replace('title', /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/).getRegex();\n  const reflink = edit(/^!?\\[(label)\\]\\[(ref)\\]/).replace('label', _inlineLabel).replace('ref', _blockLabel).getRegex();\n  const nolink = edit(/^!?\\[(ref)\\](?:\\[\\])?/).replace('ref', _blockLabel).getRegex();\n  const reflinkSearch = edit('reflink|nolink(?!\\\\()', 'g').replace('reflink', reflink).replace('nolink', nolink).getRegex();\n  /**\n   * Normal Inline Grammar\n   */\n  const inlineNormal = {\n    _backpedal: noopTest,\n    // only used for GFM url\n    anyPunctuation,\n    autolink,\n    blockSkip,\n    br,\n    code: inlineCode,\n    del: noopTest,\n    emStrongLDelim,\n    emStrongRDelimAst,\n    emStrongRDelimUnd,\n    escape: escape$1,\n    link,\n    nolink,\n    punctuation,\n    reflink,\n    reflinkSearch,\n    tag,\n    text: inlineText,\n    url: noopTest\n  };\n  /**\n   * Pedantic Inline Grammar\n   */\n  const inlinePedantic = {\n    ...inlineNormal,\n    link: edit(/^!?\\[(label)\\]\\((.*?)\\)/).replace('label', _inlineLabel).getRegex(),\n    reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/).replace('label', _inlineLabel).getRegex()\n  };\n  /**\n   * GFM Inline Grammar\n   */\n  const inlineGfm = {\n    ...inlineNormal,\n    emStrongRDelimAst: emStrongRDelimAstGfm,\n    emStrongLDelim: emStrongLDelimGfm,\n    url: edit(/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/, 'i').replace('email', /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/).getRegex(),\n    _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n    del: /^(~~?)(?=[^\\s~])((?:\\\\.|[^\\\\])*?(?:\\\\.|[^\\s~\\\\]))\\1(?=[^~]|$)/,\n    text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n  };\n  /**\n   * GFM + Line Breaks Inline Grammar\n   */\n  const inlineBreaks = {\n    ...inlineGfm,\n    br: edit(br).replace('{2,}', '*').getRegex(),\n    text: edit(inlineGfm.text).replace('\\\\b_', '\\\\b_| {2,}\\\\n').replace(/\\{2,\\}/g, '*').getRegex()\n  };\n  /**\n   * exports\n   */\n  const block = {\n    normal: blockNormal,\n    gfm: blockGfm,\n    pedantic: blockPedantic\n  };\n  const inline = {\n    normal: inlineNormal,\n    gfm: inlineGfm,\n    breaks: inlineBreaks,\n    pedantic: inlinePedantic\n  };\n\n  /**\n   * Helpers\n   */\n  const escapeReplacements = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;'\n  };\n  const getEscapeReplacement = ch => escapeReplacements[ch];\n  function escape(html, encode) {\n    if (encode) {\n      if (other.escapeTest.test(html)) {\n        return html.replace(other.escapeReplace, getEscapeReplacement);\n      }\n    } else {\n      if (other.escapeTestNoEncode.test(html)) {\n        return html.replace(other.escapeReplaceNoEncode, getEscapeReplacement);\n      }\n    }\n    return html;\n  }\n  function cleanUrl(href) {\n    try {\n      href = encodeURI(href).replace(other.percentDecode, '%');\n    } catch {\n      return null;\n    }\n    return href;\n  }\n  function splitCells(tableRow, count) {\n    // ensure that every cell-delimiting pipe has a space\n    // before it to distinguish it from an escaped pipe\n    const row = tableRow.replace(other.findPipe, (match, offset, str) => {\n        let escaped = false;\n        let curr = offset;\n        while (--curr >= 0 && str[curr] === '\\\\') escaped = !escaped;\n        if (escaped) {\n          // odd number of slashes means | is escaped\n          // so we leave it alone\n          return '|';\n        } else {\n          // add space before unescaped |\n          return ' |';\n        }\n      }),\n      cells = row.split(other.splitPipe);\n    let i = 0;\n    // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n    if (!cells[0].trim()) {\n      cells.shift();\n    }\n    if (cells.length > 0 && !cells.at(-1)?.trim()) {\n      cells.pop();\n    }\n    if (count) {\n      if (cells.length > count) {\n        cells.splice(count);\n      } else {\n        while (cells.length < count) cells.push('');\n      }\n    }\n    for (; i < cells.length; i++) {\n      // leading or trailing whitespace is ignored per the gfm spec\n      cells[i] = cells[i].trim().replace(other.slashPipe, '|');\n    }\n    return cells;\n  }\n  /**\n   * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n   * /c*$/ is vulnerable to REDOS.\n   *\n   * @param str\n   * @param c\n   * @param invert Remove suffix of non-c chars instead. Default falsey.\n   */\n  function rtrim(str, c, invert) {\n    const l = str.length;\n    if (l === 0) {\n      return '';\n    }\n    // Length of suffix matching the invert condition.\n    let suffLen = 0;\n    // Step left until we fail to match the invert condition.\n    while (suffLen < l) {\n      const currChar = str.charAt(l - suffLen - 1);\n      if (currChar === c && true) {\n        suffLen++;\n      } else {\n        break;\n      }\n    }\n    return str.slice(0, l - suffLen);\n  }\n  function findClosingBracket(str, b) {\n    if (str.indexOf(b[1]) === -1) {\n      return -1;\n    }\n    let level = 0;\n    for (let i = 0; i < str.length; i++) {\n      if (str[i] === '\\\\') {\n        i++;\n      } else if (str[i] === b[0]) {\n        level++;\n      } else if (str[i] === b[1]) {\n        level--;\n        if (level < 0) {\n          return i;\n        }\n      }\n    }\n    return -1;\n  }\n  function outputLink(cap, link, raw, lexer, rules) {\n    const href = link.href;\n    const title = link.title || null;\n    const text = cap[1].replace(rules.other.outputLinkReplace, '$1');\n    if (cap[0].charAt(0) !== '!') {\n      lexer.state.inLink = true;\n      const token = {\n        type: 'link',\n        raw,\n        href,\n        title,\n        text,\n        tokens: lexer.inlineTokens(text)\n      };\n      lexer.state.inLink = false;\n      return token;\n    }\n    return {\n      type: 'image',\n      raw,\n      href,\n      title,\n      text\n    };\n  }\n  function indentCodeCompensation(raw, text, rules) {\n    const matchIndentToCode = raw.match(rules.other.indentCodeCompensation);\n    if (matchIndentToCode === null) {\n      return text;\n    }\n    const indentToCode = matchIndentToCode[1];\n    return text.split('\\n').map(node => {\n      const matchIndentInNode = node.match(rules.other.beginningSpace);\n      if (matchIndentInNode === null) {\n        return node;\n      }\n      const [indentInNode] = matchIndentInNode;\n      if (indentInNode.length >= indentToCode.length) {\n        return node.slice(indentToCode.length);\n      }\n      return node;\n    }).join('\\n');\n  }\n  /**\n   * Tokenizer\n   */\n  class _Tokenizer {\n    options;\n    rules; // set by the lexer\n    lexer; // set by the lexer\n    constructor(options) {\n      this.options = options || exports.defaults;\n    }\n    space(src) {\n      const cap = this.rules.block.newline.exec(src);\n      if (cap && cap[0].length > 0) {\n        return {\n          type: 'space',\n          raw: cap[0]\n        };\n      }\n    }\n    code(src) {\n      const cap = this.rules.block.code.exec(src);\n      if (cap) {\n        const text = cap[0].replace(this.rules.other.codeRemoveIndent, '');\n        return {\n          type: 'code',\n          raw: cap[0],\n          codeBlockStyle: 'indented',\n          text: !this.options.pedantic ? rtrim(text, '\\n') : text\n        };\n      }\n    }\n    fences(src) {\n      const cap = this.rules.block.fences.exec(src);\n      if (cap) {\n        const raw = cap[0];\n        const text = indentCodeCompensation(raw, cap[3] || '', this.rules);\n        return {\n          type: 'code',\n          raw,\n          lang: cap[2] ? cap[2].trim().replace(this.rules.inline.anyPunctuation, '$1') : cap[2],\n          text\n        };\n      }\n    }\n    heading(src) {\n      const cap = this.rules.block.heading.exec(src);\n      if (cap) {\n        let text = cap[2].trim();\n        // remove trailing #s\n        if (this.rules.other.endingHash.test(text)) {\n          const trimmed = rtrim(text, '#');\n          if (this.options.pedantic) {\n            text = trimmed.trim();\n          } else if (!trimmed || this.rules.other.endingSpaceChar.test(trimmed)) {\n            // CommonMark requires space before trailing #s\n            text = trimmed.trim();\n          }\n        }\n        return {\n          type: 'heading',\n          raw: cap[0],\n          depth: cap[1].length,\n          text,\n          tokens: this.lexer.inline(text)\n        };\n      }\n    }\n    hr(src) {\n      const cap = this.rules.block.hr.exec(src);\n      if (cap) {\n        return {\n          type: 'hr',\n          raw: rtrim(cap[0], '\\n')\n        };\n      }\n    }\n    blockquote(src) {\n      const cap = this.rules.block.blockquote.exec(src);\n      if (cap) {\n        let lines = rtrim(cap[0], '\\n').split('\\n');\n        let raw = '';\n        let text = '';\n        const tokens = [];\n        while (lines.length > 0) {\n          let inBlockquote = false;\n          const currentLines = [];\n          let i;\n          for (i = 0; i < lines.length; i++) {\n            // get lines up to a continuation\n            if (this.rules.other.blockquoteStart.test(lines[i])) {\n              currentLines.push(lines[i]);\n              inBlockquote = true;\n            } else if (!inBlockquote) {\n              currentLines.push(lines[i]);\n            } else {\n              break;\n            }\n          }\n          lines = lines.slice(i);\n          const currentRaw = currentLines.join('\\n');\n          const currentText = currentRaw\n          // precede setext continuation with 4 spaces so it isn't a setext\n          .replace(this.rules.other.blockquoteSetextReplace, '\\n    $1').replace(this.rules.other.blockquoteSetextReplace2, '');\n          raw = raw ? `${raw}\\n${currentRaw}` : currentRaw;\n          text = text ? `${text}\\n${currentText}` : currentText;\n          // parse blockquote lines as top level tokens\n          // merge paragraphs if this is a continuation\n          const top = this.lexer.state.top;\n          this.lexer.state.top = true;\n          this.lexer.blockTokens(currentText, tokens, true);\n          this.lexer.state.top = top;\n          // if there is no continuation then we are done\n          if (lines.length === 0) {\n            break;\n          }\n          const lastToken = tokens.at(-1);\n          if (lastToken?.type === 'code') {\n            // blockquote continuation cannot be preceded by a code block\n            break;\n          } else if (lastToken?.type === 'blockquote') {\n            // include continuation in nested blockquote\n            const oldToken = lastToken;\n            const newText = oldToken.raw + '\\n' + lines.join('\\n');\n            const newToken = this.blockquote(newText);\n            tokens[tokens.length - 1] = newToken;\n            raw = raw.substring(0, raw.length - oldToken.raw.length) + newToken.raw;\n            text = text.substring(0, text.length - oldToken.text.length) + newToken.text;\n            break;\n          } else if (lastToken?.type === 'list') {\n            // include continuation in nested list\n            const oldToken = lastToken;\n            const newText = oldToken.raw + '\\n' + lines.join('\\n');\n            const newToken = this.list(newText);\n            tokens[tokens.length - 1] = newToken;\n            raw = raw.substring(0, raw.length - lastToken.raw.length) + newToken.raw;\n            text = text.substring(0, text.length - oldToken.raw.length) + newToken.raw;\n            lines = newText.substring(tokens.at(-1).raw.length).split('\\n');\n            continue;\n          }\n        }\n        return {\n          type: 'blockquote',\n          raw,\n          tokens,\n          text\n        };\n      }\n    }\n    list(src) {\n      let cap = this.rules.block.list.exec(src);\n      if (cap) {\n        let bull = cap[1].trim();\n        const isordered = bull.length > 1;\n        const list = {\n          type: 'list',\n          raw: '',\n          ordered: isordered,\n          start: isordered ? +bull.slice(0, -1) : '',\n          loose: false,\n          items: []\n        };\n        bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n        if (this.options.pedantic) {\n          bull = isordered ? bull : '[*+-]';\n        }\n        // Get next list item\n        const itemRegex = this.rules.other.listItemRegex(bull);\n        let endsWithBlankLine = false;\n        // Check if current bullet point can start a new List Item\n        while (src) {\n          let endEarly = false;\n          let raw = '';\n          let itemContents = '';\n          if (!(cap = itemRegex.exec(src))) {\n            break;\n          }\n          if (this.rules.block.hr.test(src)) {\n            // End list if bullet was actually HR (possibly move into itemRegex?)\n            break;\n          }\n          raw = cap[0];\n          src = src.substring(raw.length);\n          let line = cap[2].split('\\n', 1)[0].replace(this.rules.other.listReplaceTabs, t => ' '.repeat(3 * t.length));\n          let nextLine = src.split('\\n', 1)[0];\n          let blankLine = !line.trim();\n          let indent = 0;\n          if (this.options.pedantic) {\n            indent = 2;\n            itemContents = line.trimStart();\n          } else if (blankLine) {\n            indent = cap[1].length + 1;\n          } else {\n            indent = cap[2].search(this.rules.other.nonSpaceChar); // Find first non-space char\n            indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n            itemContents = line.slice(indent);\n            indent += cap[1].length;\n          }\n          if (blankLine && this.rules.other.blankLine.test(nextLine)) {\n            // Items begin with at most one blank line\n            raw += nextLine + '\\n';\n            src = src.substring(nextLine.length + 1);\n            endEarly = true;\n          }\n          if (!endEarly) {\n            const nextBulletRegex = this.rules.other.nextBulletRegex(indent);\n            const hrRegex = this.rules.other.hrRegex(indent);\n            const fencesBeginRegex = this.rules.other.fencesBeginRegex(indent);\n            const headingBeginRegex = this.rules.other.headingBeginRegex(indent);\n            const htmlBeginRegex = this.rules.other.htmlBeginRegex(indent);\n            // Check if following lines should be included in List Item\n            while (src) {\n              const rawLine = src.split('\\n', 1)[0];\n              let nextLineWithoutTabs;\n              nextLine = rawLine;\n              // Re-align to follow commonmark nesting rules\n              if (this.options.pedantic) {\n                nextLine = nextLine.replace(this.rules.other.listReplaceNesting, '  ');\n                nextLineWithoutTabs = nextLine;\n              } else {\n                nextLineWithoutTabs = nextLine.replace(this.rules.other.tabCharGlobal, '    ');\n              }\n              // End list item if found code fences\n              if (fencesBeginRegex.test(nextLine)) {\n                break;\n              }\n              // End list item if found start of new heading\n              if (headingBeginRegex.test(nextLine)) {\n                break;\n              }\n              // End list item if found start of html block\n              if (htmlBeginRegex.test(nextLine)) {\n                break;\n              }\n              // End list item if found start of new bullet\n              if (nextBulletRegex.test(nextLine)) {\n                break;\n              }\n              // Horizontal rule found\n              if (hrRegex.test(nextLine)) {\n                break;\n              }\n              if (nextLineWithoutTabs.search(this.rules.other.nonSpaceChar) >= indent || !nextLine.trim()) {\n                // Dedent if possible\n                itemContents += '\\n' + nextLineWithoutTabs.slice(indent);\n              } else {\n                // not enough indentation\n                if (blankLine) {\n                  break;\n                }\n                // paragraph continuation unless last line was a different block level element\n                if (line.replace(this.rules.other.tabCharGlobal, '    ').search(this.rules.other.nonSpaceChar) >= 4) {\n                  // indented code block\n                  break;\n                }\n                if (fencesBeginRegex.test(line)) {\n                  break;\n                }\n                if (headingBeginRegex.test(line)) {\n                  break;\n                }\n                if (hrRegex.test(line)) {\n                  break;\n                }\n                itemContents += '\\n' + nextLine;\n              }\n              if (!blankLine && !nextLine.trim()) {\n                // Check if current line is blank\n                blankLine = true;\n              }\n              raw += rawLine + '\\n';\n              src = src.substring(rawLine.length + 1);\n              line = nextLineWithoutTabs.slice(indent);\n            }\n          }\n          if (!list.loose) {\n            // If the previous item ended with a blank line, the list is loose\n            if (endsWithBlankLine) {\n              list.loose = true;\n            } else if (this.rules.other.doubleBlankLine.test(raw)) {\n              endsWithBlankLine = true;\n            }\n          }\n          let istask = null;\n          let ischecked;\n          // Check for task list items\n          if (this.options.gfm) {\n            istask = this.rules.other.listIsTask.exec(itemContents);\n            if (istask) {\n              ischecked = istask[0] !== '[ ] ';\n              itemContents = itemContents.replace(this.rules.other.listReplaceTask, '');\n            }\n          }\n          list.items.push({\n            type: 'list_item',\n            raw,\n            task: !!istask,\n            checked: ischecked,\n            loose: false,\n            text: itemContents,\n            tokens: []\n          });\n          list.raw += raw;\n        }\n        // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n        const lastItem = list.items.at(-1);\n        if (lastItem) {\n          lastItem.raw = lastItem.raw.trimEnd();\n          lastItem.text = lastItem.text.trimEnd();\n        } else {\n          // not a list since there were no items\n          return;\n        }\n        list.raw = list.raw.trimEnd();\n        // Item child tokens handled here at end because we needed to have the final item to trim it first\n        for (let i = 0; i < list.items.length; i++) {\n          this.lexer.state.top = false;\n          list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n          if (!list.loose) {\n            // Check if list should be loose\n            const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n            const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => this.rules.other.anyLine.test(t.raw));\n            list.loose = hasMultipleLineBreaks;\n          }\n        }\n        // Set all items to loose if list is loose\n        if (list.loose) {\n          for (let i = 0; i < list.items.length; i++) {\n            list.items[i].loose = true;\n          }\n        }\n        return list;\n      }\n    }\n    html(src) {\n      const cap = this.rules.block.html.exec(src);\n      if (cap) {\n        const token = {\n          type: 'html',\n          block: true,\n          raw: cap[0],\n          pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',\n          text: cap[0]\n        };\n        return token;\n      }\n    }\n    def(src) {\n      const cap = this.rules.block.def.exec(src);\n      if (cap) {\n        const tag = cap[1].toLowerCase().replace(this.rules.other.multipleSpaceGlobal, ' ');\n        const href = cap[2] ? cap[2].replace(this.rules.other.hrefBrackets, '$1').replace(this.rules.inline.anyPunctuation, '$1') : '';\n        const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline.anyPunctuation, '$1') : cap[3];\n        return {\n          type: 'def',\n          tag,\n          raw: cap[0],\n          href,\n          title\n        };\n      }\n    }\n    table(src) {\n      const cap = this.rules.block.table.exec(src);\n      if (!cap) {\n        return;\n      }\n      if (!this.rules.other.tableDelimiter.test(cap[2])) {\n        // delimiter row must have a pipe (|) or colon (:) otherwise it is a setext heading\n        return;\n      }\n      const headers = splitCells(cap[1]);\n      const aligns = cap[2].replace(this.rules.other.tableAlignChars, '').split('|');\n      const rows = cap[3]?.trim() ? cap[3].replace(this.rules.other.tableRowBlankLine, '').split('\\n') : [];\n      const item = {\n        type: 'table',\n        raw: cap[0],\n        header: [],\n        align: [],\n        rows: []\n      };\n      if (headers.length !== aligns.length) {\n        // header and align columns must be equal, rows can be different.\n        return;\n      }\n      for (const align of aligns) {\n        if (this.rules.other.tableAlignRight.test(align)) {\n          item.align.push('right');\n        } else if (this.rules.other.tableAlignCenter.test(align)) {\n          item.align.push('center');\n        } else if (this.rules.other.tableAlignLeft.test(align)) {\n          item.align.push('left');\n        } else {\n          item.align.push(null);\n        }\n      }\n      for (let i = 0; i < headers.length; i++) {\n        item.header.push({\n          text: headers[i],\n          tokens: this.lexer.inline(headers[i]),\n          header: true,\n          align: item.align[i]\n        });\n      }\n      for (const row of rows) {\n        item.rows.push(splitCells(row, item.header.length).map((cell, i) => {\n          return {\n            text: cell,\n            tokens: this.lexer.inline(cell),\n            header: false,\n            align: item.align[i]\n          };\n        }));\n      }\n      return item;\n    }\n    lheading(src) {\n      const cap = this.rules.block.lheading.exec(src);\n      if (cap) {\n        return {\n          type: 'heading',\n          raw: cap[0],\n          depth: cap[2].charAt(0) === '=' ? 1 : 2,\n          text: cap[1],\n          tokens: this.lexer.inline(cap[1])\n        };\n      }\n    }\n    paragraph(src) {\n      const cap = this.rules.block.paragraph.exec(src);\n      if (cap) {\n        const text = cap[1].charAt(cap[1].length - 1) === '\\n' ? cap[1].slice(0, -1) : cap[1];\n        return {\n          type: 'paragraph',\n          raw: cap[0],\n          text,\n          tokens: this.lexer.inline(text)\n        };\n      }\n    }\n    text(src) {\n      const cap = this.rules.block.text.exec(src);\n      if (cap) {\n        return {\n          type: 'text',\n          raw: cap[0],\n          text: cap[0],\n          tokens: this.lexer.inline(cap[0])\n        };\n      }\n    }\n    escape(src) {\n      const cap = this.rules.inline.escape.exec(src);\n      if (cap) {\n        return {\n          type: 'escape',\n          raw: cap[0],\n          text: cap[1]\n        };\n      }\n    }\n    tag(src) {\n      const cap = this.rules.inline.tag.exec(src);\n      if (cap) {\n        if (!this.lexer.state.inLink && this.rules.other.startATag.test(cap[0])) {\n          this.lexer.state.inLink = true;\n        } else if (this.lexer.state.inLink && this.rules.other.endATag.test(cap[0])) {\n          this.lexer.state.inLink = false;\n        }\n        if (!this.lexer.state.inRawBlock && this.rules.other.startPreScriptTag.test(cap[0])) {\n          this.lexer.state.inRawBlock = true;\n        } else if (this.lexer.state.inRawBlock && this.rules.other.endPreScriptTag.test(cap[0])) {\n          this.lexer.state.inRawBlock = false;\n        }\n        return {\n          type: 'html',\n          raw: cap[0],\n          inLink: this.lexer.state.inLink,\n          inRawBlock: this.lexer.state.inRawBlock,\n          block: false,\n          text: cap[0]\n        };\n      }\n    }\n    link(src) {\n      const cap = this.rules.inline.link.exec(src);\n      if (cap) {\n        const trimmedUrl = cap[2].trim();\n        if (!this.options.pedantic && this.rules.other.startAngleBracket.test(trimmedUrl)) {\n          // commonmark requires matching angle brackets\n          if (!this.rules.other.endAngleBracket.test(trimmedUrl)) {\n            return;\n          }\n          // ending angle bracket cannot be escaped\n          const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n          if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n            return;\n          }\n        } else {\n          // find closing parenthesis\n          const lastParenIndex = findClosingBracket(cap[2], '()');\n          if (lastParenIndex > -1) {\n            const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n            const linkLen = start + cap[1].length + lastParenIndex;\n            cap[2] = cap[2].substring(0, lastParenIndex);\n            cap[0] = cap[0].substring(0, linkLen).trim();\n            cap[3] = '';\n          }\n        }\n        let href = cap[2];\n        let title = '';\n        if (this.options.pedantic) {\n          // split pedantic href and title\n          const link = this.rules.other.pedanticHrefTitle.exec(href);\n          if (link) {\n            href = link[1];\n            title = link[3];\n          }\n        } else {\n          title = cap[3] ? cap[3].slice(1, -1) : '';\n        }\n        href = href.trim();\n        if (this.rules.other.startAngleBracket.test(href)) {\n          if (this.options.pedantic && !this.rules.other.endAngleBracket.test(trimmedUrl)) {\n            // pedantic allows starting angle bracket without ending angle bracket\n            href = href.slice(1);\n          } else {\n            href = href.slice(1, -1);\n          }\n        }\n        return outputLink(cap, {\n          href: href ? href.replace(this.rules.inline.anyPunctuation, '$1') : href,\n          title: title ? title.replace(this.rules.inline.anyPunctuation, '$1') : title\n        }, cap[0], this.lexer, this.rules);\n      }\n    }\n    reflink(src, links) {\n      let cap;\n      if ((cap = this.rules.inline.reflink.exec(src)) || (cap = this.rules.inline.nolink.exec(src))) {\n        const linkString = (cap[2] || cap[1]).replace(this.rules.other.multipleSpaceGlobal, ' ');\n        const link = links[linkString.toLowerCase()];\n        if (!link) {\n          const text = cap[0].charAt(0);\n          return {\n            type: 'text',\n            raw: text,\n            text\n          };\n        }\n        return outputLink(cap, link, cap[0], this.lexer, this.rules);\n      }\n    }\n    emStrong(src, maskedSrc) {\n      let prevChar = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n      let match = this.rules.inline.emStrongLDelim.exec(src);\n      if (!match) return;\n      // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n      if (match[3] && prevChar.match(this.rules.other.unicodeAlphaNumeric)) return;\n      const nextChar = match[1] || match[2] || '';\n      if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n        // unicode Regex counts emoji as 1 char; spread into array for proper count (used multiple times below)\n        const lLength = [...match[0]].length - 1;\n        let rDelim,\n          rLength,\n          delimTotal = lLength,\n          midDelimTotal = 0;\n        const endReg = match[0][0] === '*' ? this.rules.inline.emStrongRDelimAst : this.rules.inline.emStrongRDelimUnd;\n        endReg.lastIndex = 0;\n        // Clip maskedSrc to same section of string as src (move to lexer?)\n        maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n        while ((match = endReg.exec(maskedSrc)) != null) {\n          rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n          if (!rDelim) continue; // skip single * in __abc*abc__\n          rLength = [...rDelim].length;\n          if (match[3] || match[4]) {\n            // found another Left Delim\n            delimTotal += rLength;\n            continue;\n          } else if (match[5] || match[6]) {\n            // either Left or Right Delim\n            if (lLength % 3 && !((lLength + rLength) % 3)) {\n              midDelimTotal += rLength;\n              continue; // CommonMark Emphasis Rules 9-10\n            }\n          }\n          delimTotal -= rLength;\n          if (delimTotal > 0) continue; // Haven't found enough closing delimiters\n          // Remove extra characters. *a*** -> *a*\n          rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n          // char length can be >1 for unicode characters;\n          const lastCharLength = [...match[0]][0].length;\n          const raw = src.slice(0, lLength + match.index + lastCharLength + rLength);\n          // Create `em` if smallest delimiter has odd char count. *a***\n          if (Math.min(lLength, rLength) % 2) {\n            const text = raw.slice(1, -1);\n            return {\n              type: 'em',\n              raw,\n              text,\n              tokens: this.lexer.inlineTokens(text)\n            };\n          }\n          // Create 'strong' if smallest delimiter has even char count. **a***\n          const text = raw.slice(2, -2);\n          return {\n            type: 'strong',\n            raw,\n            text,\n            tokens: this.lexer.inlineTokens(text)\n          };\n        }\n      }\n    }\n    codespan(src) {\n      const cap = this.rules.inline.code.exec(src);\n      if (cap) {\n        let text = cap[2].replace(this.rules.other.newLineCharGlobal, ' ');\n        const hasNonSpaceChars = this.rules.other.nonSpaceChar.test(text);\n        const hasSpaceCharsOnBothEnds = this.rules.other.startingSpaceChar.test(text) && this.rules.other.endingSpaceChar.test(text);\n        if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n          text = text.substring(1, text.length - 1);\n        }\n        return {\n          type: 'codespan',\n          raw: cap[0],\n          text\n        };\n      }\n    }\n    br(src) {\n      const cap = this.rules.inline.br.exec(src);\n      if (cap) {\n        return {\n          type: 'br',\n          raw: cap[0]\n        };\n      }\n    }\n    del(src) {\n      const cap = this.rules.inline.del.exec(src);\n      if (cap) {\n        return {\n          type: 'del',\n          raw: cap[0],\n          text: cap[2],\n          tokens: this.lexer.inlineTokens(cap[2])\n        };\n      }\n    }\n    autolink(src) {\n      const cap = this.rules.inline.autolink.exec(src);\n      if (cap) {\n        let text, href;\n        if (cap[2] === '@') {\n          text = cap[1];\n          href = 'mailto:' + text;\n        } else {\n          text = cap[1];\n          href = text;\n        }\n        return {\n          type: 'link',\n          raw: cap[0],\n          text,\n          href,\n          tokens: [{\n            type: 'text',\n            raw: text,\n            text\n          }]\n        };\n      }\n    }\n    url(src) {\n      let cap;\n      if (cap = this.rules.inline.url.exec(src)) {\n        let text, href;\n        if (cap[2] === '@') {\n          text = cap[0];\n          href = 'mailto:' + text;\n        } else {\n          // do extended autolink path validation\n          let prevCapZero;\n          do {\n            prevCapZero = cap[0];\n            cap[0] = this.rules.inline._backpedal.exec(cap[0])?.[0] ?? '';\n          } while (prevCapZero !== cap[0]);\n          text = cap[0];\n          if (cap[1] === 'www.') {\n            href = 'http://' + cap[0];\n          } else {\n            href = cap[0];\n          }\n        }\n        return {\n          type: 'link',\n          raw: cap[0],\n          text,\n          href,\n          tokens: [{\n            type: 'text',\n            raw: text,\n            text\n          }]\n        };\n      }\n    }\n    inlineText(src) {\n      const cap = this.rules.inline.text.exec(src);\n      if (cap) {\n        const escaped = this.lexer.state.inRawBlock;\n        return {\n          type: 'text',\n          raw: cap[0],\n          text: cap[0],\n          escaped\n        };\n      }\n    }\n  }\n\n  /**\n   * Block Lexer\n   */\n  class _Lexer {\n    tokens;\n    options;\n    state;\n    tokenizer;\n    inlineQueue;\n    constructor(options) {\n      // TokenList cannot be created in one go\n      this.tokens = [];\n      this.tokens.links = Object.create(null);\n      this.options = options || exports.defaults;\n      this.options.tokenizer = this.options.tokenizer || new _Tokenizer();\n      this.tokenizer = this.options.tokenizer;\n      this.tokenizer.options = this.options;\n      this.tokenizer.lexer = this;\n      this.inlineQueue = [];\n      this.state = {\n        inLink: false,\n        inRawBlock: false,\n        top: true\n      };\n      const rules = {\n        other,\n        block: block.normal,\n        inline: inline.normal\n      };\n      if (this.options.pedantic) {\n        rules.block = block.pedantic;\n        rules.inline = inline.pedantic;\n      } else if (this.options.gfm) {\n        rules.block = block.gfm;\n        if (this.options.breaks) {\n          rules.inline = inline.breaks;\n        } else {\n          rules.inline = inline.gfm;\n        }\n      }\n      this.tokenizer.rules = rules;\n    }\n    /**\n     * Expose Rules\n     */\n    static get rules() {\n      return {\n        block,\n        inline\n      };\n    }\n    /**\n     * Static Lex Method\n     */\n    static lex(src, options) {\n      const lexer = new _Lexer(options);\n      return lexer.lex(src);\n    }\n    /**\n     * Static Lex Inline Method\n     */\n    static lexInline(src, options) {\n      const lexer = new _Lexer(options);\n      return lexer.inlineTokens(src);\n    }\n    /**\n     * Preprocessing\n     */\n    lex(src) {\n      src = src.replace(other.carriageReturn, '\\n');\n      this.blockTokens(src, this.tokens);\n      for (let i = 0; i < this.inlineQueue.length; i++) {\n        const next = this.inlineQueue[i];\n        this.inlineTokens(next.src, next.tokens);\n      }\n      this.inlineQueue = [];\n      return this.tokens;\n    }\n    blockTokens(src) {\n      let tokens = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      let lastParagraphClipped = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      if (this.options.pedantic) {\n        src = src.replace(other.tabCharGlobal, '    ').replace(other.spaceLine, '');\n      }\n      while (src) {\n        let token;\n        if (this.options.extensions?.block?.some(extTokenizer => {\n          if (token = extTokenizer.call({\n            lexer: this\n          }, src, tokens)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return true;\n          }\n          return false;\n        })) {\n          continue;\n        }\n        // newline\n        if (token = this.tokenizer.space(src)) {\n          src = src.substring(token.raw.length);\n          const lastToken = tokens.at(-1);\n          if (token.raw.length === 1 && lastToken !== undefined) {\n            // if there's a single \\n as a spacer, it's terminating the last line,\n            // so move it there so that we don't get unnecessary paragraph tags\n            lastToken.raw += '\\n';\n          } else {\n            tokens.push(token);\n          }\n          continue;\n        }\n        // code\n        if (token = this.tokenizer.code(src)) {\n          src = src.substring(token.raw.length);\n          const lastToken = tokens.at(-1);\n          // An indented code block cannot interrupt a paragraph.\n          if (lastToken?.type === 'paragraph' || lastToken?.type === 'text') {\n            lastToken.raw += '\\n' + token.raw;\n            lastToken.text += '\\n' + token.text;\n            this.inlineQueue.at(-1).src = lastToken.text;\n          } else {\n            tokens.push(token);\n          }\n          continue;\n        }\n        // fences\n        if (token = this.tokenizer.fences(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        }\n        // heading\n        if (token = this.tokenizer.heading(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        }\n        // hr\n        if (token = this.tokenizer.hr(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        }\n        // blockquote\n        if (token = this.tokenizer.blockquote(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        }\n        // list\n        if (token = this.tokenizer.list(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        }\n        // html\n        if (token = this.tokenizer.html(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        }\n        // def\n        if (token = this.tokenizer.def(src)) {\n          src = src.substring(token.raw.length);\n          const lastToken = tokens.at(-1);\n          if (lastToken?.type === 'paragraph' || lastToken?.type === 'text') {\n            lastToken.raw += '\\n' + token.raw;\n            lastToken.text += '\\n' + token.raw;\n            this.inlineQueue.at(-1).src = lastToken.text;\n          } else if (!this.tokens.links[token.tag]) {\n            this.tokens.links[token.tag] = {\n              href: token.href,\n              title: token.title\n            };\n          }\n          continue;\n        }\n        // table (gfm)\n        if (token = this.tokenizer.table(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        }\n        // lheading\n        if (token = this.tokenizer.lheading(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        }\n        // top-level paragraph\n        // prevent paragraph consuming extensions by clipping 'src' to extension start\n        let cutSrc = src;\n        if (this.options.extensions?.startBlock) {\n          let startIndex = Infinity;\n          const tempSrc = src.slice(1);\n          let tempStart;\n          this.options.extensions.startBlock.forEach(getStartIndex => {\n            tempStart = getStartIndex.call({\n              lexer: this\n            }, tempSrc);\n            if (typeof tempStart === 'number' && tempStart >= 0) {\n              startIndex = Math.min(startIndex, tempStart);\n            }\n          });\n          if (startIndex < Infinity && startIndex >= 0) {\n            cutSrc = src.substring(0, startIndex + 1);\n          }\n        }\n        if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n          const lastToken = tokens.at(-1);\n          if (lastParagraphClipped && lastToken?.type === 'paragraph') {\n            lastToken.raw += '\\n' + token.raw;\n            lastToken.text += '\\n' + token.text;\n            this.inlineQueue.pop();\n            this.inlineQueue.at(-1).src = lastToken.text;\n          } else {\n            tokens.push(token);\n          }\n          lastParagraphClipped = cutSrc.length !== src.length;\n          src = src.substring(token.raw.length);\n          continue;\n        }\n        // text\n        if (token = this.tokenizer.text(src)) {\n          src = src.substring(token.raw.length);\n          const lastToken = tokens.at(-1);\n          if (lastToken?.type === 'text') {\n            lastToken.raw += '\\n' + token.raw;\n            lastToken.text += '\\n' + token.text;\n            this.inlineQueue.pop();\n            this.inlineQueue.at(-1).src = lastToken.text;\n          } else {\n            tokens.push(token);\n          }\n          continue;\n        }\n        if (src) {\n          const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n          if (this.options.silent) {\n            console.error(errMsg);\n            break;\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n      this.state.top = true;\n      return tokens;\n    }\n    inline(src) {\n      let tokens = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      this.inlineQueue.push({\n        src,\n        tokens\n      });\n      return tokens;\n    }\n    /**\n     * Lexing/Compiling\n     */\n    inlineTokens(src) {\n      let tokens = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      // String with links masked to avoid interference with em and strong\n      let maskedSrc = src;\n      let match = null;\n      // Mask out reflinks\n      if (this.tokens.links) {\n        const links = Object.keys(this.tokens.links);\n        if (links.length > 0) {\n          while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n            if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n              maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n            }\n          }\n        }\n      }\n      // Mask out other blocks\n      while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n        maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n      }\n      // Mask out escaped characters\n      while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n        maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n      }\n      let keepPrevChar = false;\n      let prevChar = '';\n      while (src) {\n        if (!keepPrevChar) {\n          prevChar = '';\n        }\n        keepPrevChar = false;\n        let token;\n        // extensions\n        if (this.options.extensions?.inline?.some(extTokenizer => {\n          if (token = extTokenizer.call({\n            lexer: this\n          }, src, tokens)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return true;\n          }\n          return false;\n        })) {\n          continue;\n        }\n        // escape\n        if (token = this.tokenizer.escape(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        }\n        // tag\n        if (token = this.tokenizer.tag(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        }\n        // link\n        if (token = this.tokenizer.link(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        }\n        // reflink, nolink\n        if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n          src = src.substring(token.raw.length);\n          const lastToken = tokens.at(-1);\n          if (token.type === 'text' && lastToken?.type === 'text') {\n            lastToken.raw += token.raw;\n            lastToken.text += token.text;\n          } else {\n            tokens.push(token);\n          }\n          continue;\n        }\n        // em & strong\n        if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        }\n        // code\n        if (token = this.tokenizer.codespan(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        }\n        // br\n        if (token = this.tokenizer.br(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        }\n        // del (gfm)\n        if (token = this.tokenizer.del(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        }\n        // autolink\n        if (token = this.tokenizer.autolink(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        }\n        // url (gfm)\n        if (!this.state.inLink && (token = this.tokenizer.url(src))) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        }\n        // text\n        // prevent inlineText consuming extensions by clipping 'src' to extension start\n        let cutSrc = src;\n        if (this.options.extensions?.startInline) {\n          let startIndex = Infinity;\n          const tempSrc = src.slice(1);\n          let tempStart;\n          this.options.extensions.startInline.forEach(getStartIndex => {\n            tempStart = getStartIndex.call({\n              lexer: this\n            }, tempSrc);\n            if (typeof tempStart === 'number' && tempStart >= 0) {\n              startIndex = Math.min(startIndex, tempStart);\n            }\n          });\n          if (startIndex < Infinity && startIndex >= 0) {\n            cutSrc = src.substring(0, startIndex + 1);\n          }\n        }\n        if (token = this.tokenizer.inlineText(cutSrc)) {\n          src = src.substring(token.raw.length);\n          if (token.raw.slice(-1) !== '_') {\n            // Track prevChar before string of ____ started\n            prevChar = token.raw.slice(-1);\n          }\n          keepPrevChar = true;\n          const lastToken = tokens.at(-1);\n          if (lastToken?.type === 'text') {\n            lastToken.raw += token.raw;\n            lastToken.text += token.text;\n          } else {\n            tokens.push(token);\n          }\n          continue;\n        }\n        if (src) {\n          const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n          if (this.options.silent) {\n            console.error(errMsg);\n            break;\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n      return tokens;\n    }\n  }\n\n  /**\n   * Renderer\n   */\n  class _Renderer {\n    options;\n    parser; // set by the parser\n    constructor(options) {\n      this.options = options || exports.defaults;\n    }\n    space(token) {\n      return '';\n    }\n    code(_ref) {\n      let {\n        text,\n        lang,\n        escaped\n      } = _ref;\n      const langString = (lang || '').match(other.notSpaceStart)?.[0];\n      const code = text.replace(other.endingNewline, '') + '\\n';\n      if (!langString) {\n        return '<pre><code>' + (escaped ? code : escape(code, true)) + '</code></pre>\\n';\n      }\n      return '<pre><code class=\"language-' + escape(langString) + '\">' + (escaped ? code : escape(code, true)) + '</code></pre>\\n';\n    }\n    blockquote(_ref2) {\n      let {\n        tokens\n      } = _ref2;\n      const body = this.parser.parse(tokens);\n      return `<blockquote>\\n${body}</blockquote>\\n`;\n    }\n    html(_ref3) {\n      let {\n        text\n      } = _ref3;\n      return text;\n    }\n    heading(_ref4) {\n      let {\n        tokens,\n        depth\n      } = _ref4;\n      return `<h${depth}>${this.parser.parseInline(tokens)}</h${depth}>\\n`;\n    }\n    hr(token) {\n      return '<hr>\\n';\n    }\n    list(token) {\n      const ordered = token.ordered;\n      const start = token.start;\n      let body = '';\n      for (let j = 0; j < token.items.length; j++) {\n        const item = token.items[j];\n        body += this.listitem(item);\n      }\n      const type = ordered ? 'ol' : 'ul';\n      const startAttr = ordered && start !== 1 ? ' start=\"' + start + '\"' : '';\n      return '<' + type + startAttr + '>\\n' + body + '</' + type + '>\\n';\n    }\n    listitem(item) {\n      let itemBody = '';\n      if (item.task) {\n        const checkbox = this.checkbox({\n          checked: !!item.checked\n        });\n        if (item.loose) {\n          if (item.tokens[0]?.type === 'paragraph') {\n            item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n            if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n              item.tokens[0].tokens[0].text = checkbox + ' ' + escape(item.tokens[0].tokens[0].text);\n              item.tokens[0].tokens[0].escaped = true;\n            }\n          } else {\n            item.tokens.unshift({\n              type: 'text',\n              raw: checkbox + ' ',\n              text: checkbox + ' ',\n              escaped: true\n            });\n          }\n        } else {\n          itemBody += checkbox + ' ';\n        }\n      }\n      itemBody += this.parser.parse(item.tokens, !!item.loose);\n      return `<li>${itemBody}</li>\\n`;\n    }\n    checkbox(_ref5) {\n      let {\n        checked\n      } = _ref5;\n      return '<input ' + (checked ? 'checked=\"\" ' : '') + 'disabled=\"\" type=\"checkbox\">';\n    }\n    paragraph(_ref6) {\n      let {\n        tokens\n      } = _ref6;\n      return `<p>${this.parser.parseInline(tokens)}</p>\\n`;\n    }\n    table(token) {\n      let header = '';\n      // header\n      let cell = '';\n      for (let j = 0; j < token.header.length; j++) {\n        cell += this.tablecell(token.header[j]);\n      }\n      header += this.tablerow({\n        text: cell\n      });\n      let body = '';\n      for (let j = 0; j < token.rows.length; j++) {\n        const row = token.rows[j];\n        cell = '';\n        for (let k = 0; k < row.length; k++) {\n          cell += this.tablecell(row[k]);\n        }\n        body += this.tablerow({\n          text: cell\n        });\n      }\n      if (body) body = `<tbody>${body}</tbody>`;\n      return '<table>\\n' + '<thead>\\n' + header + '</thead>\\n' + body + '</table>\\n';\n    }\n    tablerow(_ref7) {\n      let {\n        text\n      } = _ref7;\n      return `<tr>\\n${text}</tr>\\n`;\n    }\n    tablecell(token) {\n      const content = this.parser.parseInline(token.tokens);\n      const type = token.header ? 'th' : 'td';\n      const tag = token.align ? `<${type} align=\"${token.align}\">` : `<${type}>`;\n      return tag + content + `</${type}>\\n`;\n    }\n    /**\n     * span level renderer\n     */\n    strong(_ref8) {\n      let {\n        tokens\n      } = _ref8;\n      return `<strong>${this.parser.parseInline(tokens)}</strong>`;\n    }\n    em(_ref9) {\n      let {\n        tokens\n      } = _ref9;\n      return `<em>${this.parser.parseInline(tokens)}</em>`;\n    }\n    codespan(_ref10) {\n      let {\n        text\n      } = _ref10;\n      return `<code>${escape(text, true)}</code>`;\n    }\n    br(token) {\n      return '<br>';\n    }\n    del(_ref11) {\n      let {\n        tokens\n      } = _ref11;\n      return `<del>${this.parser.parseInline(tokens)}</del>`;\n    }\n    link(_ref12) {\n      let {\n        href,\n        title,\n        tokens\n      } = _ref12;\n      const text = this.parser.parseInline(tokens);\n      const cleanHref = cleanUrl(href);\n      if (cleanHref === null) {\n        return text;\n      }\n      href = cleanHref;\n      let out = '<a href=\"' + href + '\"';\n      if (title) {\n        out += ' title=\"' + escape(title) + '\"';\n      }\n      out += '>' + text + '</a>';\n      return out;\n    }\n    image(_ref13) {\n      let {\n        href,\n        title,\n        text\n      } = _ref13;\n      const cleanHref = cleanUrl(href);\n      if (cleanHref === null) {\n        return escape(text);\n      }\n      href = cleanHref;\n      let out = `<img src=\"${href}\" alt=\"${text}\"`;\n      if (title) {\n        out += ` title=\"${escape(title)}\"`;\n      }\n      out += '>';\n      return out;\n    }\n    text(token) {\n      return 'tokens' in token && token.tokens ? this.parser.parseInline(token.tokens) : 'escaped' in token && token.escaped ? token.text : escape(token.text);\n    }\n  }\n\n  /**\n   * TextRenderer\n   * returns only the textual part of the token\n   */\n  class _TextRenderer {\n    // no need for block level renderers\n    strong(_ref14) {\n      let {\n        text\n      } = _ref14;\n      return text;\n    }\n    em(_ref15) {\n      let {\n        text\n      } = _ref15;\n      return text;\n    }\n    codespan(_ref16) {\n      let {\n        text\n      } = _ref16;\n      return text;\n    }\n    del(_ref17) {\n      let {\n        text\n      } = _ref17;\n      return text;\n    }\n    html(_ref18) {\n      let {\n        text\n      } = _ref18;\n      return text;\n    }\n    text(_ref19) {\n      let {\n        text\n      } = _ref19;\n      return text;\n    }\n    link(_ref20) {\n      let {\n        text\n      } = _ref20;\n      return '' + text;\n    }\n    image(_ref21) {\n      let {\n        text\n      } = _ref21;\n      return '' + text;\n    }\n    br() {\n      return '';\n    }\n  }\n\n  /**\n   * Parsing & Compiling\n   */\n  class _Parser {\n    options;\n    renderer;\n    textRenderer;\n    constructor(options) {\n      this.options = options || exports.defaults;\n      this.options.renderer = this.options.renderer || new _Renderer();\n      this.renderer = this.options.renderer;\n      this.renderer.options = this.options;\n      this.renderer.parser = this;\n      this.textRenderer = new _TextRenderer();\n    }\n    /**\n     * Static Parse Method\n     */\n    static parse(tokens, options) {\n      const parser = new _Parser(options);\n      return parser.parse(tokens);\n    }\n    /**\n     * Static Parse Inline Method\n     */\n    static parseInline(tokens, options) {\n      const parser = new _Parser(options);\n      return parser.parseInline(tokens);\n    }\n    /**\n     * Parse Loop\n     */\n    parse(tokens) {\n      let top = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      let out = '';\n      for (let i = 0; i < tokens.length; i++) {\n        const anyToken = tokens[i];\n        // Run any renderer extensions\n        if (this.options.extensions?.renderers?.[anyToken.type]) {\n          const genericToken = anyToken;\n          const ret = this.options.extensions.renderers[genericToken.type].call({\n            parser: this\n          }, genericToken);\n          if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(genericToken.type)) {\n            out += ret || '';\n            continue;\n          }\n        }\n        const token = anyToken;\n        switch (token.type) {\n          case 'space':\n            {\n              out += this.renderer.space(token);\n              continue;\n            }\n          case 'hr':\n            {\n              out += this.renderer.hr(token);\n              continue;\n            }\n          case 'heading':\n            {\n              out += this.renderer.heading(token);\n              continue;\n            }\n          case 'code':\n            {\n              out += this.renderer.code(token);\n              continue;\n            }\n          case 'table':\n            {\n              out += this.renderer.table(token);\n              continue;\n            }\n          case 'blockquote':\n            {\n              out += this.renderer.blockquote(token);\n              continue;\n            }\n          case 'list':\n            {\n              out += this.renderer.list(token);\n              continue;\n            }\n          case 'html':\n            {\n              out += this.renderer.html(token);\n              continue;\n            }\n          case 'paragraph':\n            {\n              out += this.renderer.paragraph(token);\n              continue;\n            }\n          case 'text':\n            {\n              let textToken = token;\n              let body = this.renderer.text(textToken);\n              while (i + 1 < tokens.length && tokens[i + 1].type === 'text') {\n                textToken = tokens[++i];\n                body += '\\n' + this.renderer.text(textToken);\n              }\n              if (top) {\n                out += this.renderer.paragraph({\n                  type: 'paragraph',\n                  raw: body,\n                  text: body,\n                  tokens: [{\n                    type: 'text',\n                    raw: body,\n                    text: body,\n                    escaped: true\n                  }]\n                });\n              } else {\n                out += body;\n              }\n              continue;\n            }\n          default:\n            {\n              const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n              if (this.options.silent) {\n                console.error(errMsg);\n                return '';\n              } else {\n                throw new Error(errMsg);\n              }\n            }\n        }\n      }\n      return out;\n    }\n    /**\n     * Parse Inline Tokens\n     */\n    parseInline(tokens) {\n      let renderer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.renderer;\n      let out = '';\n      for (let i = 0; i < tokens.length; i++) {\n        const anyToken = tokens[i];\n        // Run any renderer extensions\n        if (this.options.extensions?.renderers?.[anyToken.type]) {\n          const ret = this.options.extensions.renderers[anyToken.type].call({\n            parser: this\n          }, anyToken);\n          if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(anyToken.type)) {\n            out += ret || '';\n            continue;\n          }\n        }\n        const token = anyToken;\n        switch (token.type) {\n          case 'escape':\n            {\n              out += renderer.text(token);\n              break;\n            }\n          case 'html':\n            {\n              out += renderer.html(token);\n              break;\n            }\n          case 'link':\n            {\n              out += renderer.link(token);\n              break;\n            }\n          case 'image':\n            {\n              out += renderer.image(token);\n              break;\n            }\n          case 'strong':\n            {\n              out += renderer.strong(token);\n              break;\n            }\n          case 'em':\n            {\n              out += renderer.em(token);\n              break;\n            }\n          case 'codespan':\n            {\n              out += renderer.codespan(token);\n              break;\n            }\n          case 'br':\n            {\n              out += renderer.br(token);\n              break;\n            }\n          case 'del':\n            {\n              out += renderer.del(token);\n              break;\n            }\n          case 'text':\n            {\n              out += renderer.text(token);\n              break;\n            }\n          default:\n            {\n              const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n              if (this.options.silent) {\n                console.error(errMsg);\n                return '';\n              } else {\n                throw new Error(errMsg);\n              }\n            }\n        }\n      }\n      return out;\n    }\n  }\n  class _Hooks {\n    options;\n    block;\n    constructor(options) {\n      this.options = options || exports.defaults;\n    }\n    static passThroughHooks = new Set(['preprocess', 'postprocess', 'processAllTokens']);\n    /**\n     * Process markdown before marked\n     */\n    preprocess(markdown) {\n      return markdown;\n    }\n    /**\n     * Process HTML after marked is finished\n     */\n    postprocess(html) {\n      return html;\n    }\n    /**\n     * Process all tokens before walk tokens\n     */\n    processAllTokens(tokens) {\n      return tokens;\n    }\n    /**\n     * Provide function to tokenize markdown\n     */\n    provideLexer() {\n      return this.block ? _Lexer.lex : _Lexer.lexInline;\n    }\n    /**\n     * Provide function to parse tokens\n     */\n    provideParser() {\n      return this.block ? _Parser.parse : _Parser.parseInline;\n    }\n  }\n  class Marked {\n    defaults = _getDefaults();\n    options = this.setOptions;\n    parse = this.parseMarkdown(true);\n    parseInline = this.parseMarkdown(false);\n    Parser = _Parser;\n    Renderer = _Renderer;\n    TextRenderer = _TextRenderer;\n    Lexer = _Lexer;\n    Tokenizer = _Tokenizer;\n    Hooks = _Hooks;\n    constructor() {\n      this.use(...arguments);\n    }\n    /**\n     * Run callback for every token\n     */\n    walkTokens(tokens, callback) {\n      let values = [];\n      for (const token of tokens) {\n        values = values.concat(callback.call(this, token));\n        switch (token.type) {\n          case 'table':\n            {\n              const tableToken = token;\n              for (const cell of tableToken.header) {\n                values = values.concat(this.walkTokens(cell.tokens, callback));\n              }\n              for (const row of tableToken.rows) {\n                for (const cell of row) {\n                  values = values.concat(this.walkTokens(cell.tokens, callback));\n                }\n              }\n              break;\n            }\n          case 'list':\n            {\n              const listToken = token;\n              values = values.concat(this.walkTokens(listToken.items, callback));\n              break;\n            }\n          default:\n            {\n              const genericToken = token;\n              if (this.defaults.extensions?.childTokens?.[genericToken.type]) {\n                this.defaults.extensions.childTokens[genericToken.type].forEach(childTokens => {\n                  const tokens = genericToken[childTokens].flat(Infinity);\n                  values = values.concat(this.walkTokens(tokens, callback));\n                });\n              } else if (genericToken.tokens) {\n                values = values.concat(this.walkTokens(genericToken.tokens, callback));\n              }\n            }\n        }\n      }\n      return values;\n    }\n    use() {\n      const extensions = this.defaults.extensions || {\n        renderers: {},\n        childTokens: {}\n      };\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      args.forEach(pack => {\n        // copy options to new object\n        const opts = {\n          ...pack\n        };\n        // set async to true if it was set to true before\n        opts.async = this.defaults.async || opts.async || false;\n        // ==-- Parse \"addon\" extensions --== //\n        if (pack.extensions) {\n          pack.extensions.forEach(ext => {\n            if (!ext.name) {\n              throw new Error('extension name required');\n            }\n            if ('renderer' in ext) {\n              // Renderer extensions\n              const prevRenderer = extensions.renderers[ext.name];\n              if (prevRenderer) {\n                // Replace extension with func to run new extension but fall back if false\n                extensions.renderers[ext.name] = function () {\n                  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n                    args[_key2] = arguments[_key2];\n                  }\n                  let ret = ext.renderer.apply(this, args);\n                  if (ret === false) {\n                    ret = prevRenderer.apply(this, args);\n                  }\n                  return ret;\n                };\n              } else {\n                extensions.renderers[ext.name] = ext.renderer;\n              }\n            }\n            if ('tokenizer' in ext) {\n              // Tokenizer Extensions\n              if (!ext.level || ext.level !== 'block' && ext.level !== 'inline') {\n                throw new Error(\"extension level must be 'block' or 'inline'\");\n              }\n              const extLevel = extensions[ext.level];\n              if (extLevel) {\n                extLevel.unshift(ext.tokenizer);\n              } else {\n                extensions[ext.level] = [ext.tokenizer];\n              }\n              if (ext.start) {\n                // Function to check for start of token\n                if (ext.level === 'block') {\n                  if (extensions.startBlock) {\n                    extensions.startBlock.push(ext.start);\n                  } else {\n                    extensions.startBlock = [ext.start];\n                  }\n                } else if (ext.level === 'inline') {\n                  if (extensions.startInline) {\n                    extensions.startInline.push(ext.start);\n                  } else {\n                    extensions.startInline = [ext.start];\n                  }\n                }\n              }\n            }\n            if ('childTokens' in ext && ext.childTokens) {\n              // Child tokens to be visited by walkTokens\n              extensions.childTokens[ext.name] = ext.childTokens;\n            }\n          });\n          opts.extensions = extensions;\n        }\n        // ==-- Parse \"overwrite\" extensions --== //\n        if (pack.renderer) {\n          const renderer = this.defaults.renderer || new _Renderer(this.defaults);\n          for (const prop in pack.renderer) {\n            if (!(prop in renderer)) {\n              throw new Error(`renderer '${prop}' does not exist`);\n            }\n            if (['options', 'parser'].includes(prop)) {\n              // ignore options property\n              continue;\n            }\n            const rendererProp = prop;\n            const rendererFunc = pack.renderer[rendererProp];\n            const prevRenderer = renderer[rendererProp];\n            // Replace renderer with func to run extension, but fall back if false\n            renderer[rendererProp] = function () {\n              for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n                args[_key3] = arguments[_key3];\n              }\n              let ret = rendererFunc.apply(renderer, args);\n              if (ret === false) {\n                ret = prevRenderer.apply(renderer, args);\n              }\n              return ret || '';\n            };\n          }\n          opts.renderer = renderer;\n        }\n        if (pack.tokenizer) {\n          const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);\n          for (const prop in pack.tokenizer) {\n            if (!(prop in tokenizer)) {\n              throw new Error(`tokenizer '${prop}' does not exist`);\n            }\n            if (['options', 'rules', 'lexer'].includes(prop)) {\n              // ignore options, rules, and lexer properties\n              continue;\n            }\n            const tokenizerProp = prop;\n            const tokenizerFunc = pack.tokenizer[tokenizerProp];\n            const prevTokenizer = tokenizer[tokenizerProp];\n            // Replace tokenizer with func to run extension, but fall back if false\n            // @ts-expect-error cannot type tokenizer function dynamically\n            tokenizer[tokenizerProp] = function () {\n              for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n                args[_key4] = arguments[_key4];\n              }\n              let ret = tokenizerFunc.apply(tokenizer, args);\n              if (ret === false) {\n                ret = prevTokenizer.apply(tokenizer, args);\n              }\n              return ret;\n            };\n          }\n          opts.tokenizer = tokenizer;\n        }\n        // ==-- Parse Hooks extensions --== //\n        if (pack.hooks) {\n          const hooks = this.defaults.hooks || new _Hooks();\n          for (const prop in pack.hooks) {\n            if (!(prop in hooks)) {\n              throw new Error(`hook '${prop}' does not exist`);\n            }\n            if (['options', 'block'].includes(prop)) {\n              // ignore options and block properties\n              continue;\n            }\n            const hooksProp = prop;\n            const hooksFunc = pack.hooks[hooksProp];\n            const prevHook = hooks[hooksProp];\n            if (_Hooks.passThroughHooks.has(prop)) {\n              // @ts-expect-error cannot type hook function dynamically\n              hooks[hooksProp] = arg => {\n                if (this.defaults.async) {\n                  return Promise.resolve(hooksFunc.call(hooks, arg)).then(ret => {\n                    return prevHook.call(hooks, ret);\n                  });\n                }\n                const ret = hooksFunc.call(hooks, arg);\n                return prevHook.call(hooks, ret);\n              };\n            } else {\n              // @ts-expect-error cannot type hook function dynamically\n              hooks[hooksProp] = function () {\n                for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n                  args[_key5] = arguments[_key5];\n                }\n                let ret = hooksFunc.apply(hooks, args);\n                if (ret === false) {\n                  ret = prevHook.apply(hooks, args);\n                }\n                return ret;\n              };\n            }\n          }\n          opts.hooks = hooks;\n        }\n        // ==-- Parse WalkTokens extensions --== //\n        if (pack.walkTokens) {\n          const walkTokens = this.defaults.walkTokens;\n          const packWalktokens = pack.walkTokens;\n          opts.walkTokens = function (token) {\n            let values = [];\n            values.push(packWalktokens.call(this, token));\n            if (walkTokens) {\n              values = values.concat(walkTokens.call(this, token));\n            }\n            return values;\n          };\n        }\n        this.defaults = {\n          ...this.defaults,\n          ...opts\n        };\n      });\n      return this;\n    }\n    setOptions(opt) {\n      this.defaults = {\n        ...this.defaults,\n        ...opt\n      };\n      return this;\n    }\n    lexer(src, options) {\n      return _Lexer.lex(src, options ?? this.defaults);\n    }\n    parser(tokens, options) {\n      return _Parser.parse(tokens, options ?? this.defaults);\n    }\n    parseMarkdown(blockType) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const parse = (src, options) => {\n        const origOpt = {\n          ...options\n        };\n        const opt = {\n          ...this.defaults,\n          ...origOpt\n        };\n        const throwError = this.onError(!!opt.silent, !!opt.async);\n        // throw error if an extension set async to true but parse was called with async: false\n        if (this.defaults.async === true && origOpt.async === false) {\n          return throwError(new Error('marked(): The async option was set to true by an extension. Remove async: false from the parse options object to return a Promise.'));\n        }\n        // throw error in case of non string input\n        if (typeof src === 'undefined' || src === null) {\n          return throwError(new Error('marked(): input parameter is undefined or null'));\n        }\n        if (typeof src !== 'string') {\n          return throwError(new Error('marked(): input parameter is of type ' + Object.prototype.toString.call(src) + ', string expected'));\n        }\n        if (opt.hooks) {\n          opt.hooks.options = opt;\n          opt.hooks.block = blockType;\n        }\n        const lexer = opt.hooks ? opt.hooks.provideLexer() : blockType ? _Lexer.lex : _Lexer.lexInline;\n        const parser = opt.hooks ? opt.hooks.provideParser() : blockType ? _Parser.parse : _Parser.parseInline;\n        if (opt.async) {\n          return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src).then(src => lexer(src, opt)).then(tokens => opt.hooks ? opt.hooks.processAllTokens(tokens) : tokens).then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens).then(tokens => parser(tokens, opt)).then(html => opt.hooks ? opt.hooks.postprocess(html) : html).catch(throwError);\n        }\n        try {\n          if (opt.hooks) {\n            src = opt.hooks.preprocess(src);\n          }\n          let tokens = lexer(src, opt);\n          if (opt.hooks) {\n            tokens = opt.hooks.processAllTokens(tokens);\n          }\n          if (opt.walkTokens) {\n            this.walkTokens(tokens, opt.walkTokens);\n          }\n          let html = parser(tokens, opt);\n          if (opt.hooks) {\n            html = opt.hooks.postprocess(html);\n          }\n          return html;\n        } catch (e) {\n          return throwError(e);\n        }\n      };\n      return parse;\n    }\n    onError(silent, async) {\n      return e => {\n        e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n        if (silent) {\n          const msg = '<p>An error occurred:</p><pre>' + escape(e.message + '', true) + '</pre>';\n          if (async) {\n            return Promise.resolve(msg);\n          }\n          return msg;\n        }\n        if (async) {\n          return Promise.reject(e);\n        }\n        throw e;\n      };\n    }\n  }\n  const markedInstance = new Marked();\n  function marked(src, opt) {\n    return markedInstance.parse(src, opt);\n  }\n  /**\n   * Sets the default options.\n   *\n   * @param options Hash of options\n   */\n  marked.options = marked.setOptions = function (options) {\n    markedInstance.setOptions(options);\n    marked.defaults = markedInstance.defaults;\n    changeDefaults(marked.defaults);\n    return marked;\n  };\n  /**\n   * Gets the original marked default options.\n   */\n  marked.getDefaults = _getDefaults;\n  marked.defaults = exports.defaults;\n  /**\n   * Use Extension\n   */\n  marked.use = function () {\n    markedInstance.use(...arguments);\n    marked.defaults = markedInstance.defaults;\n    changeDefaults(marked.defaults);\n    return marked;\n  };\n  /**\n   * Run callback for every token\n   */\n  marked.walkTokens = function (tokens, callback) {\n    return markedInstance.walkTokens(tokens, callback);\n  };\n  /**\n   * Compiles markdown to HTML without enclosing `p` tag.\n   *\n   * @param src String of markdown source to be compiled\n   * @param options Hash of options\n   * @return String of compiled HTML\n   */\n  marked.parseInline = markedInstance.parseInline;\n  /**\n   * Expose\n   */\n  marked.Parser = _Parser;\n  marked.parser = _Parser.parse;\n  marked.Renderer = _Renderer;\n  marked.TextRenderer = _TextRenderer;\n  marked.Lexer = _Lexer;\n  marked.lexer = _Lexer.lex;\n  marked.Tokenizer = _Tokenizer;\n  marked.Hooks = _Hooks;\n  marked.parse = marked;\n  const options = marked.options;\n  const setOptions = marked.setOptions;\n  const use = marked.use;\n  const walkTokens = marked.walkTokens;\n  const parseInline = marked.parseInline;\n  const parse = marked;\n  const parser = _Parser.parse;\n  const lexer = _Lexer.lex;\n  exports.Hooks = _Hooks;\n  exports.Lexer = _Lexer;\n  exports.Marked = Marked;\n  exports.Parser = _Parser;\n  exports.Renderer = _Renderer;\n  exports.TextRenderer = _TextRenderer;\n  exports.Tokenizer = _Tokenizer;\n  exports.getDefaults = _getDefaults;\n  exports.lexer = lexer;\n  exports.marked = marked;\n  exports.options = options;\n  exports.parse = parse;\n  exports.parseInline = parseInline;\n  exports.parser = parser;\n  exports.setOptions = setOptions;\n  exports.use = use;\n  exports.walkTokens = walkTokens;\n});","map":{"version":3,"names":["_getDefaults","async","breaks","extensions","gfm","hooks","pedantic","renderer","silent","tokenizer","walkTokens","exports","defaults","changeDefaults","newDefaults","noopTest","exec","edit","regex","opt","arguments","length","undefined","source","obj","replace","name","val","valSource","other","caret","getRegex","RegExp","codeRemoveIndent","outputLinkReplace","indentCodeCompensation","beginningSpace","endingHash","startingSpaceChar","endingSpaceChar","nonSpaceChar","newLineCharGlobal","tabCharGlobal","multipleSpaceGlobal","blankLine","doubleBlankLine","blockquoteStart","blockquoteSetextReplace","blockquoteSetextReplace2","listReplaceTabs","listReplaceNesting","listIsTask","listReplaceTask","anyLine","hrefBrackets","tableDelimiter","tableAlignChars","tableRowBlankLine","tableAlignRight","tableAlignCenter","tableAlignLeft","startATag","endATag","startPreScriptTag","endPreScriptTag","startAngleBracket","endAngleBracket","pedanticHrefTitle","unicodeAlphaNumeric","escapeTest","escapeReplace","escapeTestNoEncode","escapeReplaceNoEncode","unescapeTest","percentDecode","findPipe","splitPipe","slashPipe","carriageReturn","spaceLine","notSpaceStart","endingNewline","listItemRegex","bull","nextBulletRegex","indent","Math","min","hrRegex","fencesBeginRegex","headingBeginRegex","htmlBeginRegex","newline","blockCode","fences","hr","heading","bullet","lheadingCore","lheading","lheadingGfm","_paragraph","blockText","_blockLabel","def","list","_tag","_comment","html","paragraph","blockquote","blockNormal","code","table","text","gfmTable","blockGfm","blockPedantic","escape$1","inlineCode","br","inlineText","_punctuation","_punctuationOrSpace","_notPunctuationOrSpace","punctuation","_punctuationGfmStrongEm","_punctuationOrSpaceGfmStrongEm","_notPunctuationOrSpaceGfmStrongEm","blockSkip","emStrongLDelimCore","emStrongLDelim","emStrongLDelimGfm","emStrongRDelimAstCore","emStrongRDelimAst","emStrongRDelimAstGfm","emStrongRDelimUnd","anyPunctuation","autolink","_inlineComment","tag","_inlineLabel","link","reflink","nolink","reflinkSearch","inlineNormal","_backpedal","del","escape","url","inlinePedantic","inlineGfm","inlineBreaks","block","normal","inline","escapeReplacements","getEscapeReplacement","ch","encode","test","cleanUrl","href","encodeURI","splitCells","tableRow","count","row","match","offset","str","escaped","curr","cells","split","i","trim","shift","at","pop","splice","push","rtrim","c","invert","l","suffLen","currChar","charAt","slice","findClosingBracket","b","indexOf","level","outputLink","cap","raw","lexer","rules","title","state","inLink","token","type","tokens","inlineTokens","matchIndentToCode","indentToCode","map","node","matchIndentInNode","indentInNode","join","_Tokenizer","options","constructor","space","src","codeBlockStyle","lang","trimmed","depth","lines","inBlockquote","currentLines","currentRaw","currentText","top","blockTokens","lastToken","oldToken","newText","newToken","substring","isordered","ordered","start","loose","items","itemRegex","endsWithBlankLine","endEarly","itemContents","line","t","repeat","nextLine","trimStart","search","rawLine","nextLineWithoutTabs","istask","ischecked","task","checked","lastItem","trimEnd","spacers","filter","hasMultipleLineBreaks","some","pre","toLowerCase","headers","aligns","rows","item","header","align","cell","inRawBlock","trimmedUrl","rtrimSlash","lastParenIndex","linkLen","links","linkString","emStrong","maskedSrc","prevChar","nextChar","lLength","rDelim","rLength","delimTotal","midDelimTotal","endReg","lastIndex","lastCharLength","index","codespan","hasNonSpaceChars","hasSpaceCharsOnBothEnds","prevCapZero","_Lexer","inlineQueue","Object","create","lex","lexInline","next","lastParagraphClipped","extTokenizer","call","cutSrc","startBlock","startIndex","Infinity","tempSrc","tempStart","forEach","getStartIndex","errMsg","charCodeAt","console","error","Error","keys","includes","lastIndexOf","keepPrevChar","startInline","_Renderer","parser","_ref","langString","_ref2","body","parse","_ref3","_ref4","parseInline","j","listitem","startAttr","itemBody","checkbox","unshift","_ref5","_ref6","tablecell","tablerow","k","_ref7","content","strong","_ref8","em","_ref9","_ref10","_ref11","_ref12","cleanHref","out","image","_ref13","_TextRenderer","_ref14","_ref15","_ref16","_ref17","_ref18","_ref19","_ref20","_ref21","_Parser","textRenderer","anyToken","renderers","genericToken","ret","textToken","_Hooks","passThroughHooks","Set","preprocess","markdown","postprocess","processAllTokens","provideLexer","provideParser","Marked","setOptions","parseMarkdown","Parser","Renderer","TextRenderer","Lexer","Tokenizer","Hooks","use","callback","values","concat","tableToken","listToken","childTokens","flat","_len","args","Array","_key","pack","opts","ext","prevRenderer","_len2","_key2","apply","extLevel","prop","rendererProp","rendererFunc","_len3","_key3","tokenizerProp","tokenizerFunc","prevTokenizer","_len4","_key4","hooksProp","hooksFunc","prevHook","has","arg","Promise","resolve","then","_len5","_key5","packWalktokens","blockType","origOpt","throwError","onError","prototype","toString","all","catch","e","message","msg","reject","markedInstance","marked","getDefaults"],"sources":["../src/defaults.ts","../src/rules.ts","../src/helpers.ts","../src/Tokenizer.ts","../src/Lexer.ts","../src/Renderer.ts","../src/TextRenderer.ts","../src/Parser.ts","../src/Hooks.ts","../src/Instance.ts","../src/marked.ts"],"sourcesContent":["/**\n * Gets the original marked default options.\n */\nexport function _getDefaults() {\n    return {\n        async: false,\n        breaks: false,\n        extensions: null,\n        gfm: true,\n        hooks: null,\n        pedantic: false,\n        renderer: null,\n        silent: false,\n        tokenizer: null,\n        walkTokens: null,\n    };\n}\nexport let _defaults = _getDefaults();\nexport function changeDefaults(newDefaults) {\n    _defaults = newDefaults;\n}\n","const noopTest = { exec: () => null };\nfunction edit(regex, opt = '') {\n    let source = typeof regex === 'string' ? regex : regex.source;\n    const obj = {\n        replace: (name, val) => {\n            let valSource = typeof val === 'string' ? val : val.source;\n            valSource = valSource.replace(other.caret, '$1');\n            source = source.replace(name, valSource);\n            return obj;\n        },\n        getRegex: () => {\n            return new RegExp(source, opt);\n        },\n    };\n    return obj;\n}\nexport const other = {\n    codeRemoveIndent: /^(?: {1,4}| {0,3}\\t)/gm,\n    outputLinkReplace: /\\\\([\\[\\]])/g,\n    indentCodeCompensation: /^(\\s+)(?:```)/,\n    beginningSpace: /^\\s+/,\n    endingHash: /#$/,\n    startingSpaceChar: /^ /,\n    endingSpaceChar: / $/,\n    nonSpaceChar: /[^ ]/,\n    newLineCharGlobal: /\\n/g,\n    tabCharGlobal: /\\t/g,\n    multipleSpaceGlobal: /\\s+/g,\n    blankLine: /^[ \\t]*$/,\n    doubleBlankLine: /\\n[ \\t]*\\n[ \\t]*$/,\n    blockquoteStart: /^ {0,3}>/,\n    blockquoteSetextReplace: /\\n {0,3}((?:=+|-+) *)(?=\\n|$)/g,\n    blockquoteSetextReplace2: /^ {0,3}>[ \\t]?/gm,\n    listReplaceTabs: /^\\t+/,\n    listReplaceNesting: /^ {1,4}(?=( {4})*[^ ])/g,\n    listIsTask: /^\\[[ xX]\\] /,\n    listReplaceTask: /^\\[[ xX]\\] +/,\n    anyLine: /\\n.*\\n/,\n    hrefBrackets: /^<(.*)>$/,\n    tableDelimiter: /[:|]/,\n    tableAlignChars: /^\\||\\| *$/g,\n    tableRowBlankLine: /\\n[ \\t]*$/,\n    tableAlignRight: /^ *-+: *$/,\n    tableAlignCenter: /^ *:-+: *$/,\n    tableAlignLeft: /^ *:-+ *$/,\n    startATag: /^<a /i,\n    endATag: /^<\\/a>/i,\n    startPreScriptTag: /^<(pre|code|kbd|script)(\\s|>)/i,\n    endPreScriptTag: /^<\\/(pre|code|kbd|script)(\\s|>)/i,\n    startAngleBracket: /^</,\n    endAngleBracket: />$/,\n    pedanticHrefTitle: /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/,\n    unicodeAlphaNumeric: /[\\p{L}\\p{N}]/u,\n    escapeTest: /[&<>\"']/,\n    escapeReplace: /[&<>\"']/g,\n    escapeTestNoEncode: /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/,\n    escapeReplaceNoEncode: /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/g,\n    unescapeTest: /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig,\n    caret: /(^|[^\\[])\\^/g,\n    percentDecode: /%25/g,\n    findPipe: /\\|/g,\n    splitPipe: / \\|/,\n    slashPipe: /\\\\\\|/g,\n    carriageReturn: /\\r\\n|\\r/g,\n    spaceLine: /^ +$/gm,\n    notSpaceStart: /^\\S*/,\n    endingNewline: /\\n$/,\n    listItemRegex: (bull) => new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`),\n    nextBulletRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`),\n    hrRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`),\n    fencesBeginRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`),\n    headingBeginRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`),\n    htmlBeginRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}<(?:[a-z].*>|!--)`, 'i'),\n};\n/**\n * Block-Level Grammar\n */\nconst newline = /^(?:[ \\t]*(?:\\n|$))+/;\nconst blockCode = /^((?: {4}| {0,3}\\t)[^\\n]+(?:\\n(?:[ \\t]*(?:\\n|$))*)?)+/;\nconst fences = /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/;\nconst hr = /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/;\nconst heading = /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/;\nconst bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nconst lheadingCore = /^(?!bull |blockCode|fences|blockquote|heading|html|table)((?:.|\\n(?!\\s*?\\n|bull |blockCode|fences|blockquote|heading|html|table))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/;\nconst lheading = edit(lheadingCore)\n    .replace(/bull/g, bullet) // lists can interrupt\n    .replace(/blockCode/g, /(?: {4}| {0,3}\\t)/) // indented code blocks can interrupt\n    .replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n    .replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n    .replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n    .replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n    .replace(/\\|table/g, '') // table not in commonmark\n    .getRegex();\nconst lheadingGfm = edit(lheadingCore)\n    .replace(/bull/g, bullet) // lists can interrupt\n    .replace(/blockCode/g, /(?: {4}| {0,3}\\t)/) // indented code blocks can interrupt\n    .replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n    .replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n    .replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n    .replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n    .replace(/table/g, / {0,3}\\|?(?:[:\\- ]*\\|)+[\\:\\- ]*\\n/) // table can interrupt\n    .getRegex();\nconst _paragraph = /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/;\nconst blockText = /^[^\\n]+/;\nconst _blockLabel = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nconst def = edit(/^ {0,3}\\[(label)\\]: *(?:\\n[ \\t]*)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n[ \\t]*)?| *\\n[ \\t]*)(title))? *(?:\\n+|$)/)\n    .replace('label', _blockLabel)\n    .replace('title', /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/)\n    .getRegex();\nconst list = edit(/^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/)\n    .replace(/bull/g, bullet)\n    .getRegex();\nconst _tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n    + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n    + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n    + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n    + '|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title'\n    + '|tr|track|ul';\nconst _comment = /<!--(?:-?>|[\\s\\S]*?(?:-->|$))/;\nconst html = edit('^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (6)\n    + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (7) open tag\n    + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (7) closing tag\n    + ')', 'i')\n    .replace('comment', _comment)\n    .replace('tag', _tag)\n    .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n    .getRegex();\nconst paragraph = edit(_paragraph)\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n    .replace('|table', '')\n    .replace('blockquote', ' {0,3}>')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n    .getRegex();\nconst blockquote = edit(/^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/)\n    .replace('paragraph', paragraph)\n    .getRegex();\n/**\n * Normal Block Grammar\n */\nconst blockNormal = {\n    blockquote,\n    code: blockCode,\n    def,\n    fences,\n    heading,\n    hr,\n    html,\n    lheading,\n    list,\n    newline,\n    paragraph,\n    table: noopTest,\n    text: blockText,\n};\n/**\n * GFM Block Grammar\n */\nconst gfmTable = edit('^ *([^\\\\n ].*)\\\\n' // Header\n    + ' {0,3}((?:\\\\| *)?:?-+:? *(?:\\\\| *:?-+:? *)*(?:\\\\| *)?)' // Align\n    + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)') // Cells\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('blockquote', ' {0,3}>')\n    .replace('code', '(?: {4}| {0,3}\\t)[^\\\\n]')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // tables can be interrupted by type (6) html blocks\n    .getRegex();\nconst blockGfm = {\n    ...blockNormal,\n    lheading: lheadingGfm,\n    table: gfmTable,\n    paragraph: edit(_paragraph)\n        .replace('hr', hr)\n        .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n        .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n        .replace('table', gfmTable) // interrupt paragraphs with table\n        .replace('blockquote', ' {0,3}>')\n        .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n        .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n        .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n        .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n        .getRegex(),\n};\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\nconst blockPedantic = {\n    ...blockNormal,\n    html: edit('^ *(?:comment *(?:\\\\n|\\\\s*$)'\n        + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n        + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n        .replace('comment', _comment)\n        .replace(/tag/g, '(?!(?:'\n        + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n        + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n        + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n        .getRegex(),\n    def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n    heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n    fences: noopTest, // fences not supported\n    lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n    paragraph: edit(_paragraph)\n        .replace('hr', hr)\n        .replace('heading', ' *#{1,6} *[^\\n]')\n        .replace('lheading', lheading)\n        .replace('|table', '')\n        .replace('blockquote', ' {0,3}>')\n        .replace('|fences', '')\n        .replace('|list', '')\n        .replace('|html', '')\n        .replace('|tag', '')\n        .getRegex(),\n};\n/**\n * Inline-Level Grammar\n */\nconst escape = /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/;\nconst inlineCode = /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/;\nconst br = /^( {2,}|\\\\)\\n(?!\\s*$)/;\nconst inlineText = /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/;\n// list of unicode punctuation marks, plus any missing characters from CommonMark spec\nconst _punctuation = /[\\p{P}\\p{S}]/u;\nconst _punctuationOrSpace = /[\\s\\p{P}\\p{S}]/u;\nconst _notPunctuationOrSpace = /[^\\s\\p{P}\\p{S}]/u;\nconst punctuation = edit(/^((?![*_])punctSpace)/, 'u')\n    .replace(/punctSpace/g, _punctuationOrSpace).getRegex();\n// GFM allows ~ inside strong and em for strikethrough\nconst _punctuationGfmStrongEm = /(?!~)[\\p{P}\\p{S}]/u;\nconst _punctuationOrSpaceGfmStrongEm = /(?!~)[\\s\\p{P}\\p{S}]/u;\nconst _notPunctuationOrSpaceGfmStrongEm = /(?:[^\\s\\p{P}\\p{S}]|~)/u;\n// sequences em should skip over [title](link), `code`, <html>\nconst blockSkip = /\\[[^[\\]]*?\\]\\((?:\\\\.|[^\\\\\\(\\)]|\\((?:\\\\.|[^\\\\\\(\\)])*\\))*\\)|`[^`]*?`|<[^<>]*?>/g;\nconst emStrongLDelimCore = /^(?:\\*+(?:((?!\\*)punct)|[^\\s*]))|^_+(?:((?!_)punct)|([^\\s_]))/;\nconst emStrongLDelim = edit(emStrongLDelimCore, 'u')\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst emStrongLDelimGfm = edit(emStrongLDelimCore, 'u')\n    .replace(/punct/g, _punctuationGfmStrongEm)\n    .getRegex();\nconst emStrongRDelimAstCore = '^[^_*]*?__[^_*]*?\\\\*[^_*]*?(?=__)' // Skip orphan inside strong\n    + '|[^*]+(?=[^*])' // Consume to delim\n    + '|(?!\\\\*)punct(\\\\*+)(?=[\\\\s]|$)' // (1) #*** can only be a Right Delimiter\n    + '|notPunctSpace(\\\\*+)(?!\\\\*)(?=punctSpace|$)' // (2) a***#, a*** can only be a Right Delimiter\n    + '|(?!\\\\*)punctSpace(\\\\*+)(?=notPunctSpace)' // (3) #***a, ***a can only be Left Delimiter\n    + '|[\\\\s](\\\\*+)(?!\\\\*)(?=punct)' // (4) ***# can only be Left Delimiter\n    + '|(?!\\\\*)punct(\\\\*+)(?!\\\\*)(?=punct)' // (5) #***# can be either Left or Right Delimiter\n    + '|notPunctSpace(\\\\*+)(?=notPunctSpace)'; // (6) a***a can be either Left or Right Delimiter\nconst emStrongRDelimAst = edit(emStrongRDelimAstCore, 'gu')\n    .replace(/notPunctSpace/g, _notPunctuationOrSpace)\n    .replace(/punctSpace/g, _punctuationOrSpace)\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst emStrongRDelimAstGfm = edit(emStrongRDelimAstCore, 'gu')\n    .replace(/notPunctSpace/g, _notPunctuationOrSpaceGfmStrongEm)\n    .replace(/punctSpace/g, _punctuationOrSpaceGfmStrongEm)\n    .replace(/punct/g, _punctuationGfmStrongEm)\n    .getRegex();\n// (6) Not allowed for _\nconst emStrongRDelimUnd = edit('^[^_*]*?\\\\*\\\\*[^_*]*?_[^_*]*?(?=\\\\*\\\\*)' // Skip orphan inside strong\n    + '|[^_]+(?=[^_])' // Consume to delim\n    + '|(?!_)punct(_+)(?=[\\\\s]|$)' // (1) #___ can only be a Right Delimiter\n    + '|notPunctSpace(_+)(?!_)(?=punctSpace|$)' // (2) a___#, a___ can only be a Right Delimiter\n    + '|(?!_)punctSpace(_+)(?=notPunctSpace)' // (3) #___a, ___a can only be Left Delimiter\n    + '|[\\\\s](_+)(?!_)(?=punct)' // (4) ___# can only be Left Delimiter\n    + '|(?!_)punct(_+)(?!_)(?=punct)', 'gu') // (5) #___# can be either Left or Right Delimiter\n    .replace(/notPunctSpace/g, _notPunctuationOrSpace)\n    .replace(/punctSpace/g, _punctuationOrSpace)\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst anyPunctuation = edit(/\\\\(punct)/, 'gu')\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst autolink = edit(/^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/)\n    .replace('scheme', /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/)\n    .replace('email', /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/)\n    .getRegex();\nconst _inlineComment = edit(_comment).replace('(?:-->|$)', '-->').getRegex();\nconst tag = edit('^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>') // CDATA section\n    .replace('comment', _inlineComment)\n    .replace('attribute', /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/)\n    .getRegex();\nconst _inlineLabel = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\nconst link = edit(/^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/)\n    .replace('label', _inlineLabel)\n    .replace('href', /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/)\n    .replace('title', /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/)\n    .getRegex();\nconst reflink = edit(/^!?\\[(label)\\]\\[(ref)\\]/)\n    .replace('label', _inlineLabel)\n    .replace('ref', _blockLabel)\n    .getRegex();\nconst nolink = edit(/^!?\\[(ref)\\](?:\\[\\])?/)\n    .replace('ref', _blockLabel)\n    .getRegex();\nconst reflinkSearch = edit('reflink|nolink(?!\\\\()', 'g')\n    .replace('reflink', reflink)\n    .replace('nolink', nolink)\n    .getRegex();\n/**\n * Normal Inline Grammar\n */\nconst inlineNormal = {\n    _backpedal: noopTest, // only used for GFM url\n    anyPunctuation,\n    autolink,\n    blockSkip,\n    br,\n    code: inlineCode,\n    del: noopTest,\n    emStrongLDelim,\n    emStrongRDelimAst,\n    emStrongRDelimUnd,\n    escape,\n    link,\n    nolink,\n    punctuation,\n    reflink,\n    reflinkSearch,\n    tag,\n    text: inlineText,\n    url: noopTest,\n};\n/**\n * Pedantic Inline Grammar\n */\nconst inlinePedantic = {\n    ...inlineNormal,\n    link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n        .replace('label', _inlineLabel)\n        .getRegex(),\n    reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n        .replace('label', _inlineLabel)\n        .getRegex(),\n};\n/**\n * GFM Inline Grammar\n */\nconst inlineGfm = {\n    ...inlineNormal,\n    emStrongRDelimAst: emStrongRDelimAstGfm,\n    emStrongLDelim: emStrongLDelimGfm,\n    url: edit(/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/, 'i')\n        .replace('email', /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/)\n        .getRegex(),\n    _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n    del: /^(~~?)(?=[^\\s~])((?:\\\\.|[^\\\\])*?(?:\\\\.|[^\\s~\\\\]))\\1(?=[^~]|$)/,\n    text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/,\n};\n/**\n * GFM + Line Breaks Inline Grammar\n */\nconst inlineBreaks = {\n    ...inlineGfm,\n    br: edit(br).replace('{2,}', '*').getRegex(),\n    text: edit(inlineGfm.text)\n        .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n        .replace(/\\{2,\\}/g, '*')\n        .getRegex(),\n};\n/**\n * exports\n */\nexport const block = {\n    normal: blockNormal,\n    gfm: blockGfm,\n    pedantic: blockPedantic,\n};\nexport const inline = {\n    normal: inlineNormal,\n    gfm: inlineGfm,\n    breaks: inlineBreaks,\n    pedantic: inlinePedantic,\n};\n","import { other } from './rules.ts';\n/**\n * Helpers\n */\nconst escapeReplacements = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n};\nconst getEscapeReplacement = (ch) => escapeReplacements[ch];\nexport function escape(html, encode) {\n    if (encode) {\n        if (other.escapeTest.test(html)) {\n            return html.replace(other.escapeReplace, getEscapeReplacement);\n        }\n    }\n    else {\n        if (other.escapeTestNoEncode.test(html)) {\n            return html.replace(other.escapeReplaceNoEncode, getEscapeReplacement);\n        }\n    }\n    return html;\n}\nexport function unescape(html) {\n    // explicitly match decimal, hex, and named HTML entities\n    return html.replace(other.unescapeTest, (_, n) => {\n        n = n.toLowerCase();\n        if (n === 'colon')\n            return ':';\n        if (n.charAt(0) === '#') {\n            return n.charAt(1) === 'x'\n                ? String.fromCharCode(parseInt(n.substring(2), 16))\n                : String.fromCharCode(+n.substring(1));\n        }\n        return '';\n    });\n}\nexport function cleanUrl(href) {\n    try {\n        href = encodeURI(href).replace(other.percentDecode, '%');\n    }\n    catch {\n        return null;\n    }\n    return href;\n}\nexport function splitCells(tableRow, count) {\n    // ensure that every cell-delimiting pipe has a space\n    // before it to distinguish it from an escaped pipe\n    const row = tableRow.replace(other.findPipe, (match, offset, str) => {\n        let escaped = false;\n        let curr = offset;\n        while (--curr >= 0 && str[curr] === '\\\\')\n            escaped = !escaped;\n        if (escaped) {\n            // odd number of slashes means | is escaped\n            // so we leave it alone\n            return '|';\n        }\n        else {\n            // add space before unescaped |\n            return ' |';\n        }\n    }), cells = row.split(other.splitPipe);\n    let i = 0;\n    // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n    if (!cells[0].trim()) {\n        cells.shift();\n    }\n    if (cells.length > 0 && !cells.at(-1)?.trim()) {\n        cells.pop();\n    }\n    if (count) {\n        if (cells.length > count) {\n            cells.splice(count);\n        }\n        else {\n            while (cells.length < count)\n                cells.push('');\n        }\n    }\n    for (; i < cells.length; i++) {\n        // leading or trailing whitespace is ignored per the gfm spec\n        cells[i] = cells[i].trim().replace(other.slashPipe, '|');\n    }\n    return cells;\n}\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param str\n * @param c\n * @param invert Remove suffix of non-c chars instead. Default falsey.\n */\nexport function rtrim(str, c, invert) {\n    const l = str.length;\n    if (l === 0) {\n        return '';\n    }\n    // Length of suffix matching the invert condition.\n    let suffLen = 0;\n    // Step left until we fail to match the invert condition.\n    while (suffLen < l) {\n        const currChar = str.charAt(l - suffLen - 1);\n        if (currChar === c && !invert) {\n            suffLen++;\n        }\n        else if (currChar !== c && invert) {\n            suffLen++;\n        }\n        else {\n            break;\n        }\n    }\n    return str.slice(0, l - suffLen);\n}\nexport function findClosingBracket(str, b) {\n    if (str.indexOf(b[1]) === -1) {\n        return -1;\n    }\n    let level = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] === '\\\\') {\n            i++;\n        }\n        else if (str[i] === b[0]) {\n            level++;\n        }\n        else if (str[i] === b[1]) {\n            level--;\n            if (level < 0) {\n                return i;\n            }\n        }\n    }\n    return -1;\n}\n","import { _defaults } from './defaults.ts';\nimport { rtrim, splitCells, findClosingBracket, } from './helpers.ts';\nfunction outputLink(cap, link, raw, lexer, rules) {\n    const href = link.href;\n    const title = link.title || null;\n    const text = cap[1].replace(rules.other.outputLinkReplace, '$1');\n    if (cap[0].charAt(0) !== '!') {\n        lexer.state.inLink = true;\n        const token = {\n            type: 'link',\n            raw,\n            href,\n            title,\n            text,\n            tokens: lexer.inlineTokens(text),\n        };\n        lexer.state.inLink = false;\n        return token;\n    }\n    return {\n        type: 'image',\n        raw,\n        href,\n        title,\n        text,\n    };\n}\nfunction indentCodeCompensation(raw, text, rules) {\n    const matchIndentToCode = raw.match(rules.other.indentCodeCompensation);\n    if (matchIndentToCode === null) {\n        return text;\n    }\n    const indentToCode = matchIndentToCode[1];\n    return text\n        .split('\\n')\n        .map(node => {\n        const matchIndentInNode = node.match(rules.other.beginningSpace);\n        if (matchIndentInNode === null) {\n            return node;\n        }\n        const [indentInNode] = matchIndentInNode;\n        if (indentInNode.length >= indentToCode.length) {\n            return node.slice(indentToCode.length);\n        }\n        return node;\n    })\n        .join('\\n');\n}\n/**\n * Tokenizer\n */\nexport class _Tokenizer {\n    options;\n    rules; // set by the lexer\n    lexer; // set by the lexer\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    space(src) {\n        const cap = this.rules.block.newline.exec(src);\n        if (cap && cap[0].length > 0) {\n            return {\n                type: 'space',\n                raw: cap[0],\n            };\n        }\n    }\n    code(src) {\n        const cap = this.rules.block.code.exec(src);\n        if (cap) {\n            const text = cap[0].replace(this.rules.other.codeRemoveIndent, '');\n            return {\n                type: 'code',\n                raw: cap[0],\n                codeBlockStyle: 'indented',\n                text: !this.options.pedantic\n                    ? rtrim(text, '\\n')\n                    : text,\n            };\n        }\n    }\n    fences(src) {\n        const cap = this.rules.block.fences.exec(src);\n        if (cap) {\n            const raw = cap[0];\n            const text = indentCodeCompensation(raw, cap[3] || '', this.rules);\n            return {\n                type: 'code',\n                raw,\n                lang: cap[2] ? cap[2].trim().replace(this.rules.inline.anyPunctuation, '$1') : cap[2],\n                text,\n            };\n        }\n    }\n    heading(src) {\n        const cap = this.rules.block.heading.exec(src);\n        if (cap) {\n            let text = cap[2].trim();\n            // remove trailing #s\n            if (this.rules.other.endingHash.test(text)) {\n                const trimmed = rtrim(text, '#');\n                if (this.options.pedantic) {\n                    text = trimmed.trim();\n                }\n                else if (!trimmed || this.rules.other.endingSpaceChar.test(trimmed)) {\n                    // CommonMark requires space before trailing #s\n                    text = trimmed.trim();\n                }\n            }\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[1].length,\n                text,\n                tokens: this.lexer.inline(text),\n            };\n        }\n    }\n    hr(src) {\n        const cap = this.rules.block.hr.exec(src);\n        if (cap) {\n            return {\n                type: 'hr',\n                raw: rtrim(cap[0], '\\n'),\n            };\n        }\n    }\n    blockquote(src) {\n        const cap = this.rules.block.blockquote.exec(src);\n        if (cap) {\n            let lines = rtrim(cap[0], '\\n').split('\\n');\n            let raw = '';\n            let text = '';\n            const tokens = [];\n            while (lines.length > 0) {\n                let inBlockquote = false;\n                const currentLines = [];\n                let i;\n                for (i = 0; i < lines.length; i++) {\n                    // get lines up to a continuation\n                    if (this.rules.other.blockquoteStart.test(lines[i])) {\n                        currentLines.push(lines[i]);\n                        inBlockquote = true;\n                    }\n                    else if (!inBlockquote) {\n                        currentLines.push(lines[i]);\n                    }\n                    else {\n                        break;\n                    }\n                }\n                lines = lines.slice(i);\n                const currentRaw = currentLines.join('\\n');\n                const currentText = currentRaw\n                    // precede setext continuation with 4 spaces so it isn't a setext\n                    .replace(this.rules.other.blockquoteSetextReplace, '\\n    $1')\n                    .replace(this.rules.other.blockquoteSetextReplace2, '');\n                raw = raw ? `${raw}\\n${currentRaw}` : currentRaw;\n                text = text ? `${text}\\n${currentText}` : currentText;\n                // parse blockquote lines as top level tokens\n                // merge paragraphs if this is a continuation\n                const top = this.lexer.state.top;\n                this.lexer.state.top = true;\n                this.lexer.blockTokens(currentText, tokens, true);\n                this.lexer.state.top = top;\n                // if there is no continuation then we are done\n                if (lines.length === 0) {\n                    break;\n                }\n                const lastToken = tokens.at(-1);\n                if (lastToken?.type === 'code') {\n                    // blockquote continuation cannot be preceded by a code block\n                    break;\n                }\n                else if (lastToken?.type === 'blockquote') {\n                    // include continuation in nested blockquote\n                    const oldToken = lastToken;\n                    const newText = oldToken.raw + '\\n' + lines.join('\\n');\n                    const newToken = this.blockquote(newText);\n                    tokens[tokens.length - 1] = newToken;\n                    raw = raw.substring(0, raw.length - oldToken.raw.length) + newToken.raw;\n                    text = text.substring(0, text.length - oldToken.text.length) + newToken.text;\n                    break;\n                }\n                else if (lastToken?.type === 'list') {\n                    // include continuation in nested list\n                    const oldToken = lastToken;\n                    const newText = oldToken.raw + '\\n' + lines.join('\\n');\n                    const newToken = this.list(newText);\n                    tokens[tokens.length - 1] = newToken;\n                    raw = raw.substring(0, raw.length - lastToken.raw.length) + newToken.raw;\n                    text = text.substring(0, text.length - oldToken.raw.length) + newToken.raw;\n                    lines = newText.substring(tokens.at(-1).raw.length).split('\\n');\n                    continue;\n                }\n            }\n            return {\n                type: 'blockquote',\n                raw,\n                tokens,\n                text,\n            };\n        }\n    }\n    list(src) {\n        let cap = this.rules.block.list.exec(src);\n        if (cap) {\n            let bull = cap[1].trim();\n            const isordered = bull.length > 1;\n            const list = {\n                type: 'list',\n                raw: '',\n                ordered: isordered,\n                start: isordered ? +bull.slice(0, -1) : '',\n                loose: false,\n                items: [],\n            };\n            bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n            if (this.options.pedantic) {\n                bull = isordered ? bull : '[*+-]';\n            }\n            // Get next list item\n            const itemRegex = this.rules.other.listItemRegex(bull);\n            let endsWithBlankLine = false;\n            // Check if current bullet point can start a new List Item\n            while (src) {\n                let endEarly = false;\n                let raw = '';\n                let itemContents = '';\n                if (!(cap = itemRegex.exec(src))) {\n                    break;\n                }\n                if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n                    break;\n                }\n                raw = cap[0];\n                src = src.substring(raw.length);\n                let line = cap[2].split('\\n', 1)[0].replace(this.rules.other.listReplaceTabs, (t) => ' '.repeat(3 * t.length));\n                let nextLine = src.split('\\n', 1)[0];\n                let blankLine = !line.trim();\n                let indent = 0;\n                if (this.options.pedantic) {\n                    indent = 2;\n                    itemContents = line.trimStart();\n                }\n                else if (blankLine) {\n                    indent = cap[1].length + 1;\n                }\n                else {\n                    indent = cap[2].search(this.rules.other.nonSpaceChar); // Find first non-space char\n                    indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n                    itemContents = line.slice(indent);\n                    indent += cap[1].length;\n                }\n                if (blankLine && this.rules.other.blankLine.test(nextLine)) { // Items begin with at most one blank line\n                    raw += nextLine + '\\n';\n                    src = src.substring(nextLine.length + 1);\n                    endEarly = true;\n                }\n                if (!endEarly) {\n                    const nextBulletRegex = this.rules.other.nextBulletRegex(indent);\n                    const hrRegex = this.rules.other.hrRegex(indent);\n                    const fencesBeginRegex = this.rules.other.fencesBeginRegex(indent);\n                    const headingBeginRegex = this.rules.other.headingBeginRegex(indent);\n                    const htmlBeginRegex = this.rules.other.htmlBeginRegex(indent);\n                    // Check if following lines should be included in List Item\n                    while (src) {\n                        const rawLine = src.split('\\n', 1)[0];\n                        let nextLineWithoutTabs;\n                        nextLine = rawLine;\n                        // Re-align to follow commonmark nesting rules\n                        if (this.options.pedantic) {\n                            nextLine = nextLine.replace(this.rules.other.listReplaceNesting, '  ');\n                            nextLineWithoutTabs = nextLine;\n                        }\n                        else {\n                            nextLineWithoutTabs = nextLine.replace(this.rules.other.tabCharGlobal, '    ');\n                        }\n                        // End list item if found code fences\n                        if (fencesBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new heading\n                        if (headingBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of html block\n                        if (htmlBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new bullet\n                        if (nextBulletRegex.test(nextLine)) {\n                            break;\n                        }\n                        // Horizontal rule found\n                        if (hrRegex.test(nextLine)) {\n                            break;\n                        }\n                        if (nextLineWithoutTabs.search(this.rules.other.nonSpaceChar) >= indent || !nextLine.trim()) { // Dedent if possible\n                            itemContents += '\\n' + nextLineWithoutTabs.slice(indent);\n                        }\n                        else {\n                            // not enough indentation\n                            if (blankLine) {\n                                break;\n                            }\n                            // paragraph continuation unless last line was a different block level element\n                            if (line.replace(this.rules.other.tabCharGlobal, '    ').search(this.rules.other.nonSpaceChar) >= 4) { // indented code block\n                                break;\n                            }\n                            if (fencesBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (headingBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (hrRegex.test(line)) {\n                                break;\n                            }\n                            itemContents += '\\n' + nextLine;\n                        }\n                        if (!blankLine && !nextLine.trim()) { // Check if current line is blank\n                            blankLine = true;\n                        }\n                        raw += rawLine + '\\n';\n                        src = src.substring(rawLine.length + 1);\n                        line = nextLineWithoutTabs.slice(indent);\n                    }\n                }\n                if (!list.loose) {\n                    // If the previous item ended with a blank line, the list is loose\n                    if (endsWithBlankLine) {\n                        list.loose = true;\n                    }\n                    else if (this.rules.other.doubleBlankLine.test(raw)) {\n                        endsWithBlankLine = true;\n                    }\n                }\n                let istask = null;\n                let ischecked;\n                // Check for task list items\n                if (this.options.gfm) {\n                    istask = this.rules.other.listIsTask.exec(itemContents);\n                    if (istask) {\n                        ischecked = istask[0] !== '[ ] ';\n                        itemContents = itemContents.replace(this.rules.other.listReplaceTask, '');\n                    }\n                }\n                list.items.push({\n                    type: 'list_item',\n                    raw,\n                    task: !!istask,\n                    checked: ischecked,\n                    loose: false,\n                    text: itemContents,\n                    tokens: [],\n                });\n                list.raw += raw;\n            }\n            // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n            const lastItem = list.items.at(-1);\n            if (lastItem) {\n                lastItem.raw = lastItem.raw.trimEnd();\n                lastItem.text = lastItem.text.trimEnd();\n            }\n            else {\n                // not a list since there were no items\n                return;\n            }\n            list.raw = list.raw.trimEnd();\n            // Item child tokens handled here at end because we needed to have the final item to trim it first\n            for (let i = 0; i < list.items.length; i++) {\n                this.lexer.state.top = false;\n                list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n                if (!list.loose) {\n                    // Check if list should be loose\n                    const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n                    const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => this.rules.other.anyLine.test(t.raw));\n                    list.loose = hasMultipleLineBreaks;\n                }\n            }\n            // Set all items to loose if list is loose\n            if (list.loose) {\n                for (let i = 0; i < list.items.length; i++) {\n                    list.items[i].loose = true;\n                }\n            }\n            return list;\n        }\n    }\n    html(src) {\n        const cap = this.rules.block.html.exec(src);\n        if (cap) {\n            const token = {\n                type: 'html',\n                block: true,\n                raw: cap[0],\n                pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',\n                text: cap[0],\n            };\n            return token;\n        }\n    }\n    def(src) {\n        const cap = this.rules.block.def.exec(src);\n        if (cap) {\n            const tag = cap[1].toLowerCase().replace(this.rules.other.multipleSpaceGlobal, ' ');\n            const href = cap[2] ? cap[2].replace(this.rules.other.hrefBrackets, '$1').replace(this.rules.inline.anyPunctuation, '$1') : '';\n            const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline.anyPunctuation, '$1') : cap[3];\n            return {\n                type: 'def',\n                tag,\n                raw: cap[0],\n                href,\n                title,\n            };\n        }\n    }\n    table(src) {\n        const cap = this.rules.block.table.exec(src);\n        if (!cap) {\n            return;\n        }\n        if (!this.rules.other.tableDelimiter.test(cap[2])) {\n            // delimiter row must have a pipe (|) or colon (:) otherwise it is a setext heading\n            return;\n        }\n        const headers = splitCells(cap[1]);\n        const aligns = cap[2].replace(this.rules.other.tableAlignChars, '').split('|');\n        const rows = cap[3]?.trim() ? cap[3].replace(this.rules.other.tableRowBlankLine, '').split('\\n') : [];\n        const item = {\n            type: 'table',\n            raw: cap[0],\n            header: [],\n            align: [],\n            rows: [],\n        };\n        if (headers.length !== aligns.length) {\n            // header and align columns must be equal, rows can be different.\n            return;\n        }\n        for (const align of aligns) {\n            if (this.rules.other.tableAlignRight.test(align)) {\n                item.align.push('right');\n            }\n            else if (this.rules.other.tableAlignCenter.test(align)) {\n                item.align.push('center');\n            }\n            else if (this.rules.other.tableAlignLeft.test(align)) {\n                item.align.push('left');\n            }\n            else {\n                item.align.push(null);\n            }\n        }\n        for (let i = 0; i < headers.length; i++) {\n            item.header.push({\n                text: headers[i],\n                tokens: this.lexer.inline(headers[i]),\n                header: true,\n                align: item.align[i],\n            });\n        }\n        for (const row of rows) {\n            item.rows.push(splitCells(row, item.header.length).map((cell, i) => {\n                return {\n                    text: cell,\n                    tokens: this.lexer.inline(cell),\n                    header: false,\n                    align: item.align[i],\n                };\n            }));\n        }\n        return item;\n    }\n    lheading(src) {\n        const cap = this.rules.block.lheading.exec(src);\n        if (cap) {\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[2].charAt(0) === '=' ? 1 : 2,\n                text: cap[1],\n                tokens: this.lexer.inline(cap[1]),\n            };\n        }\n    }\n    paragraph(src) {\n        const cap = this.rules.block.paragraph.exec(src);\n        if (cap) {\n            const text = cap[1].charAt(cap[1].length - 1) === '\\n'\n                ? cap[1].slice(0, -1)\n                : cap[1];\n            return {\n                type: 'paragraph',\n                raw: cap[0],\n                text,\n                tokens: this.lexer.inline(text),\n            };\n        }\n    }\n    text(src) {\n        const cap = this.rules.block.text.exec(src);\n        if (cap) {\n            return {\n                type: 'text',\n                raw: cap[0],\n                text: cap[0],\n                tokens: this.lexer.inline(cap[0]),\n            };\n        }\n    }\n    escape(src) {\n        const cap = this.rules.inline.escape.exec(src);\n        if (cap) {\n            return {\n                type: 'escape',\n                raw: cap[0],\n                text: cap[1],\n            };\n        }\n    }\n    tag(src) {\n        const cap = this.rules.inline.tag.exec(src);\n        if (cap) {\n            if (!this.lexer.state.inLink && this.rules.other.startATag.test(cap[0])) {\n                this.lexer.state.inLink = true;\n            }\n            else if (this.lexer.state.inLink && this.rules.other.endATag.test(cap[0])) {\n                this.lexer.state.inLink = false;\n            }\n            if (!this.lexer.state.inRawBlock && this.rules.other.startPreScriptTag.test(cap[0])) {\n                this.lexer.state.inRawBlock = true;\n            }\n            else if (this.lexer.state.inRawBlock && this.rules.other.endPreScriptTag.test(cap[0])) {\n                this.lexer.state.inRawBlock = false;\n            }\n            return {\n                type: 'html',\n                raw: cap[0],\n                inLink: this.lexer.state.inLink,\n                inRawBlock: this.lexer.state.inRawBlock,\n                block: false,\n                text: cap[0],\n            };\n        }\n    }\n    link(src) {\n        const cap = this.rules.inline.link.exec(src);\n        if (cap) {\n            const trimmedUrl = cap[2].trim();\n            if (!this.options.pedantic && this.rules.other.startAngleBracket.test(trimmedUrl)) {\n                // commonmark requires matching angle brackets\n                if (!(this.rules.other.endAngleBracket.test(trimmedUrl))) {\n                    return;\n                }\n                // ending angle bracket cannot be escaped\n                const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n                if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n                    return;\n                }\n            }\n            else {\n                // find closing parenthesis\n                const lastParenIndex = findClosingBracket(cap[2], '()');\n                if (lastParenIndex > -1) {\n                    const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n                    const linkLen = start + cap[1].length + lastParenIndex;\n                    cap[2] = cap[2].substring(0, lastParenIndex);\n                    cap[0] = cap[0].substring(0, linkLen).trim();\n                    cap[3] = '';\n                }\n            }\n            let href = cap[2];\n            let title = '';\n            if (this.options.pedantic) {\n                // split pedantic href and title\n                const link = this.rules.other.pedanticHrefTitle.exec(href);\n                if (link) {\n                    href = link[1];\n                    title = link[3];\n                }\n            }\n            else {\n                title = cap[3] ? cap[3].slice(1, -1) : '';\n            }\n            href = href.trim();\n            if (this.rules.other.startAngleBracket.test(href)) {\n                if (this.options.pedantic && !(this.rules.other.endAngleBracket.test(trimmedUrl))) {\n                    // pedantic allows starting angle bracket without ending angle bracket\n                    href = href.slice(1);\n                }\n                else {\n                    href = href.slice(1, -1);\n                }\n            }\n            return outputLink(cap, {\n                href: href ? href.replace(this.rules.inline.anyPunctuation, '$1') : href,\n                title: title ? title.replace(this.rules.inline.anyPunctuation, '$1') : title,\n            }, cap[0], this.lexer, this.rules);\n        }\n    }\n    reflink(src, links) {\n        let cap;\n        if ((cap = this.rules.inline.reflink.exec(src))\n            || (cap = this.rules.inline.nolink.exec(src))) {\n            const linkString = (cap[2] || cap[1]).replace(this.rules.other.multipleSpaceGlobal, ' ');\n            const link = links[linkString.toLowerCase()];\n            if (!link) {\n                const text = cap[0].charAt(0);\n                return {\n                    type: 'text',\n                    raw: text,\n                    text,\n                };\n            }\n            return outputLink(cap, link, cap[0], this.lexer, this.rules);\n        }\n    }\n    emStrong(src, maskedSrc, prevChar = '') {\n        let match = this.rules.inline.emStrongLDelim.exec(src);\n        if (!match)\n            return;\n        // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n        if (match[3] && prevChar.match(this.rules.other.unicodeAlphaNumeric))\n            return;\n        const nextChar = match[1] || match[2] || '';\n        if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n            // unicode Regex counts emoji as 1 char; spread into array for proper count (used multiple times below)\n            const lLength = [...match[0]].length - 1;\n            let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n            const endReg = match[0][0] === '*' ? this.rules.inline.emStrongRDelimAst : this.rules.inline.emStrongRDelimUnd;\n            endReg.lastIndex = 0;\n            // Clip maskedSrc to same section of string as src (move to lexer?)\n            maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n            while ((match = endReg.exec(maskedSrc)) != null) {\n                rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n                if (!rDelim)\n                    continue; // skip single * in __abc*abc__\n                rLength = [...rDelim].length;\n                if (match[3] || match[4]) { // found another Left Delim\n                    delimTotal += rLength;\n                    continue;\n                }\n                else if (match[5] || match[6]) { // either Left or Right Delim\n                    if (lLength % 3 && !((lLength + rLength) % 3)) {\n                        midDelimTotal += rLength;\n                        continue; // CommonMark Emphasis Rules 9-10\n                    }\n                }\n                delimTotal -= rLength;\n                if (delimTotal > 0)\n                    continue; // Haven't found enough closing delimiters\n                // Remove extra characters. *a*** -> *a*\n                rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n                // char length can be >1 for unicode characters;\n                const lastCharLength = [...match[0]][0].length;\n                const raw = src.slice(0, lLength + match.index + lastCharLength + rLength);\n                // Create `em` if smallest delimiter has odd char count. *a***\n                if (Math.min(lLength, rLength) % 2) {\n                    const text = raw.slice(1, -1);\n                    return {\n                        type: 'em',\n                        raw,\n                        text,\n                        tokens: this.lexer.inlineTokens(text),\n                    };\n                }\n                // Create 'strong' if smallest delimiter has even char count. **a***\n                const text = raw.slice(2, -2);\n                return {\n                    type: 'strong',\n                    raw,\n                    text,\n                    tokens: this.lexer.inlineTokens(text),\n                };\n            }\n        }\n    }\n    codespan(src) {\n        const cap = this.rules.inline.code.exec(src);\n        if (cap) {\n            let text = cap[2].replace(this.rules.other.newLineCharGlobal, ' ');\n            const hasNonSpaceChars = this.rules.other.nonSpaceChar.test(text);\n            const hasSpaceCharsOnBothEnds = this.rules.other.startingSpaceChar.test(text) && this.rules.other.endingSpaceChar.test(text);\n            if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n                text = text.substring(1, text.length - 1);\n            }\n            return {\n                type: 'codespan',\n                raw: cap[0],\n                text,\n            };\n        }\n    }\n    br(src) {\n        const cap = this.rules.inline.br.exec(src);\n        if (cap) {\n            return {\n                type: 'br',\n                raw: cap[0],\n            };\n        }\n    }\n    del(src) {\n        const cap = this.rules.inline.del.exec(src);\n        if (cap) {\n            return {\n                type: 'del',\n                raw: cap[0],\n                text: cap[2],\n                tokens: this.lexer.inlineTokens(cap[2]),\n            };\n        }\n    }\n    autolink(src) {\n        const cap = this.rules.inline.autolink.exec(src);\n        if (cap) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = cap[1];\n                href = 'mailto:' + text;\n            }\n            else {\n                text = cap[1];\n                href = text;\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text,\n                    },\n                ],\n            };\n        }\n    }\n    url(src) {\n        let cap;\n        if (cap = this.rules.inline.url.exec(src)) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = cap[0];\n                href = 'mailto:' + text;\n            }\n            else {\n                // do extended autolink path validation\n                let prevCapZero;\n                do {\n                    prevCapZero = cap[0];\n                    cap[0] = this.rules.inline._backpedal.exec(cap[0])?.[0] ?? '';\n                } while (prevCapZero !== cap[0]);\n                text = cap[0];\n                if (cap[1] === 'www.') {\n                    href = 'http://' + cap[0];\n                }\n                else {\n                    href = cap[0];\n                }\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text,\n                    },\n                ],\n            };\n        }\n    }\n    inlineText(src) {\n        const cap = this.rules.inline.text.exec(src);\n        if (cap) {\n            const escaped = this.lexer.state.inRawBlock;\n            return {\n                type: 'text',\n                raw: cap[0],\n                text: cap[0],\n                escaped,\n            };\n        }\n    }\n}\n","import { _Tokenizer } from './Tokenizer.ts';\nimport { _defaults } from './defaults.ts';\nimport { other, block, inline } from './rules.ts';\n/**\n * Block Lexer\n */\nexport class _Lexer {\n    tokens;\n    options;\n    state;\n    tokenizer;\n    inlineQueue;\n    constructor(options) {\n        // TokenList cannot be created in one go\n        this.tokens = [];\n        this.tokens.links = Object.create(null);\n        this.options = options || _defaults;\n        this.options.tokenizer = this.options.tokenizer || new _Tokenizer();\n        this.tokenizer = this.options.tokenizer;\n        this.tokenizer.options = this.options;\n        this.tokenizer.lexer = this;\n        this.inlineQueue = [];\n        this.state = {\n            inLink: false,\n            inRawBlock: false,\n            top: true,\n        };\n        const rules = {\n            other,\n            block: block.normal,\n            inline: inline.normal,\n        };\n        if (this.options.pedantic) {\n            rules.block = block.pedantic;\n            rules.inline = inline.pedantic;\n        }\n        else if (this.options.gfm) {\n            rules.block = block.gfm;\n            if (this.options.breaks) {\n                rules.inline = inline.breaks;\n            }\n            else {\n                rules.inline = inline.gfm;\n            }\n        }\n        this.tokenizer.rules = rules;\n    }\n    /**\n     * Expose Rules\n     */\n    static get rules() {\n        return {\n            block,\n            inline,\n        };\n    }\n    /**\n     * Static Lex Method\n     */\n    static lex(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.lex(src);\n    }\n    /**\n     * Static Lex Inline Method\n     */\n    static lexInline(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.inlineTokens(src);\n    }\n    /**\n     * Preprocessing\n     */\n    lex(src) {\n        src = src.replace(other.carriageReturn, '\\n');\n        this.blockTokens(src, this.tokens);\n        for (let i = 0; i < this.inlineQueue.length; i++) {\n            const next = this.inlineQueue[i];\n            this.inlineTokens(next.src, next.tokens);\n        }\n        this.inlineQueue = [];\n        return this.tokens;\n    }\n    blockTokens(src, tokens = [], lastParagraphClipped = false) {\n        if (this.options.pedantic) {\n            src = src.replace(other.tabCharGlobal, '    ').replace(other.spaceLine, '');\n        }\n        while (src) {\n            let token;\n            if (this.options.extensions?.block?.some((extTokenizer) => {\n                if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    return true;\n                }\n                return false;\n            })) {\n                continue;\n            }\n            // newline\n            if (token = this.tokenizer.space(src)) {\n                src = src.substring(token.raw.length);\n                const lastToken = tokens.at(-1);\n                if (token.raw.length === 1 && lastToken !== undefined) {\n                    // if there's a single \\n as a spacer, it's terminating the last line,\n                    // so move it there so that we don't get unnecessary paragraph tags\n                    lastToken.raw += '\\n';\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.code(src)) {\n                src = src.substring(token.raw.length);\n                const lastToken = tokens.at(-1);\n                // An indented code block cannot interrupt a paragraph.\n                if (lastToken?.type === 'paragraph' || lastToken?.type === 'text') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.at(-1).src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // fences\n            if (token = this.tokenizer.fences(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // heading\n            if (token = this.tokenizer.heading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // hr\n            if (token = this.tokenizer.hr(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // blockquote\n            if (token = this.tokenizer.blockquote(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // list\n            if (token = this.tokenizer.list(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // html\n            if (token = this.tokenizer.html(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // def\n            if (token = this.tokenizer.def(src)) {\n                src = src.substring(token.raw.length);\n                const lastToken = tokens.at(-1);\n                if (lastToken?.type === 'paragraph' || lastToken?.type === 'text') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.raw;\n                    this.inlineQueue.at(-1).src = lastToken.text;\n                }\n                else if (!this.tokens.links[token.tag]) {\n                    this.tokens.links[token.tag] = {\n                        href: token.href,\n                        title: token.title,\n                    };\n                }\n                continue;\n            }\n            // table (gfm)\n            if (token = this.tokenizer.table(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // lheading\n            if (token = this.tokenizer.lheading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // top-level paragraph\n            // prevent paragraph consuming extensions by clipping 'src' to extension start\n            let cutSrc = src;\n            if (this.options.extensions?.startBlock) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startBlock.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n                const lastToken = tokens.at(-1);\n                if (lastParagraphClipped && lastToken?.type === 'paragraph') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue.at(-1).src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                lastParagraphClipped = cutSrc.length !== src.length;\n                src = src.substring(token.raw.length);\n                continue;\n            }\n            // text\n            if (token = this.tokenizer.text(src)) {\n                src = src.substring(token.raw.length);\n                const lastToken = tokens.at(-1);\n                if (lastToken?.type === 'text') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue.at(-1).src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        this.state.top = true;\n        return tokens;\n    }\n    inline(src, tokens = []) {\n        this.inlineQueue.push({ src, tokens });\n        return tokens;\n    }\n    /**\n     * Lexing/Compiling\n     */\n    inlineTokens(src, tokens = []) {\n        // String with links masked to avoid interference with em and strong\n        let maskedSrc = src;\n        let match = null;\n        // Mask out reflinks\n        if (this.tokens.links) {\n            const links = Object.keys(this.tokens.links);\n            if (links.length > 0) {\n                while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n                    if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n                        maskedSrc = maskedSrc.slice(0, match.index)\n                            + '[' + 'a'.repeat(match[0].length - 2) + ']'\n                            + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n                    }\n                }\n            }\n        }\n        // Mask out other blocks\n        while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n        }\n        // Mask out escaped characters\n        while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n        }\n        let keepPrevChar = false;\n        let prevChar = '';\n        while (src) {\n            if (!keepPrevChar) {\n                prevChar = '';\n            }\n            keepPrevChar = false;\n            let token;\n            // extensions\n            if (this.options.extensions?.inline?.some((extTokenizer) => {\n                if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    return true;\n                }\n                return false;\n            })) {\n                continue;\n            }\n            // escape\n            if (token = this.tokenizer.escape(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // tag\n            if (token = this.tokenizer.tag(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // link\n            if (token = this.tokenizer.link(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // reflink, nolink\n            if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n                src = src.substring(token.raw.length);\n                const lastToken = tokens.at(-1);\n                if (token.type === 'text' && lastToken?.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // em & strong\n            if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.codespan(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // br\n            if (token = this.tokenizer.br(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // del (gfm)\n            if (token = this.tokenizer.del(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // autolink\n            if (token = this.tokenizer.autolink(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // url (gfm)\n            if (!this.state.inLink && (token = this.tokenizer.url(src))) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // text\n            // prevent inlineText consuming extensions by clipping 'src' to extension start\n            let cutSrc = src;\n            if (this.options.extensions?.startInline) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startInline.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (token = this.tokenizer.inlineText(cutSrc)) {\n                src = src.substring(token.raw.length);\n                if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n                    prevChar = token.raw.slice(-1);\n                }\n                keepPrevChar = true;\n                const lastToken = tokens.at(-1);\n                if (lastToken?.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        return tokens;\n    }\n}\n","import { _defaults } from './defaults.ts';\nimport { cleanUrl, escape, } from './helpers.ts';\nimport { other } from './rules.ts';\n/**\n * Renderer\n */\nexport class _Renderer {\n    options;\n    parser; // set by the parser\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    space(token) {\n        return '';\n    }\n    code({ text, lang, escaped }) {\n        const langString = (lang || '').match(other.notSpaceStart)?.[0];\n        const code = text.replace(other.endingNewline, '') + '\\n';\n        if (!langString) {\n            return '<pre><code>'\n                + (escaped ? code : escape(code, true))\n                + '</code></pre>\\n';\n        }\n        return '<pre><code class=\"language-'\n            + escape(langString)\n            + '\">'\n            + (escaped ? code : escape(code, true))\n            + '</code></pre>\\n';\n    }\n    blockquote({ tokens }) {\n        const body = this.parser.parse(tokens);\n        return `<blockquote>\\n${body}</blockquote>\\n`;\n    }\n    html({ text }) {\n        return text;\n    }\n    heading({ tokens, depth }) {\n        return `<h${depth}>${this.parser.parseInline(tokens)}</h${depth}>\\n`;\n    }\n    hr(token) {\n        return '<hr>\\n';\n    }\n    list(token) {\n        const ordered = token.ordered;\n        const start = token.start;\n        let body = '';\n        for (let j = 0; j < token.items.length; j++) {\n            const item = token.items[j];\n            body += this.listitem(item);\n        }\n        const type = ordered ? 'ol' : 'ul';\n        const startAttr = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n        return '<' + type + startAttr + '>\\n' + body + '</' + type + '>\\n';\n    }\n    listitem(item) {\n        let itemBody = '';\n        if (item.task) {\n            const checkbox = this.checkbox({ checked: !!item.checked });\n            if (item.loose) {\n                if (item.tokens[0]?.type === 'paragraph') {\n                    item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                    if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                        item.tokens[0].tokens[0].text = checkbox + ' ' + escape(item.tokens[0].tokens[0].text);\n                        item.tokens[0].tokens[0].escaped = true;\n                    }\n                }\n                else {\n                    item.tokens.unshift({\n                        type: 'text',\n                        raw: checkbox + ' ',\n                        text: checkbox + ' ',\n                        escaped: true,\n                    });\n                }\n            }\n            else {\n                itemBody += checkbox + ' ';\n            }\n        }\n        itemBody += this.parser.parse(item.tokens, !!item.loose);\n        return `<li>${itemBody}</li>\\n`;\n    }\n    checkbox({ checked }) {\n        return '<input '\n            + (checked ? 'checked=\"\" ' : '')\n            + 'disabled=\"\" type=\"checkbox\">';\n    }\n    paragraph({ tokens }) {\n        return `<p>${this.parser.parseInline(tokens)}</p>\\n`;\n    }\n    table(token) {\n        let header = '';\n        // header\n        let cell = '';\n        for (let j = 0; j < token.header.length; j++) {\n            cell += this.tablecell(token.header[j]);\n        }\n        header += this.tablerow({ text: cell });\n        let body = '';\n        for (let j = 0; j < token.rows.length; j++) {\n            const row = token.rows[j];\n            cell = '';\n            for (let k = 0; k < row.length; k++) {\n                cell += this.tablecell(row[k]);\n            }\n            body += this.tablerow({ text: cell });\n        }\n        if (body)\n            body = `<tbody>${body}</tbody>`;\n        return '<table>\\n'\n            + '<thead>\\n'\n            + header\n            + '</thead>\\n'\n            + body\n            + '</table>\\n';\n    }\n    tablerow({ text }) {\n        return `<tr>\\n${text}</tr>\\n`;\n    }\n    tablecell(token) {\n        const content = this.parser.parseInline(token.tokens);\n        const type = token.header ? 'th' : 'td';\n        const tag = token.align\n            ? `<${type} align=\"${token.align}\">`\n            : `<${type}>`;\n        return tag + content + `</${type}>\\n`;\n    }\n    /**\n     * span level renderer\n     */\n    strong({ tokens }) {\n        return `<strong>${this.parser.parseInline(tokens)}</strong>`;\n    }\n    em({ tokens }) {\n        return `<em>${this.parser.parseInline(tokens)}</em>`;\n    }\n    codespan({ text }) {\n        return `<code>${escape(text, true)}</code>`;\n    }\n    br(token) {\n        return '<br>';\n    }\n    del({ tokens }) {\n        return `<del>${this.parser.parseInline(tokens)}</del>`;\n    }\n    link({ href, title, tokens }) {\n        const text = this.parser.parseInline(tokens);\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return text;\n        }\n        href = cleanHref;\n        let out = '<a href=\"' + href + '\"';\n        if (title) {\n            out += ' title=\"' + (escape(title)) + '\"';\n        }\n        out += '>' + text + '</a>';\n        return out;\n    }\n    image({ href, title, text }) {\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return escape(text);\n        }\n        href = cleanHref;\n        let out = `<img src=\"${href}\" alt=\"${text}\"`;\n        if (title) {\n            out += ` title=\"${escape(title)}\"`;\n        }\n        out += '>';\n        return out;\n    }\n    text(token) {\n        return 'tokens' in token && token.tokens\n            ? this.parser.parseInline(token.tokens)\n            : ('escaped' in token && token.escaped ? token.text : escape(token.text));\n    }\n}\n","/**\n * TextRenderer\n * returns only the textual part of the token\n */\nexport class _TextRenderer {\n    // no need for block level renderers\n    strong({ text }) {\n        return text;\n    }\n    em({ text }) {\n        return text;\n    }\n    codespan({ text }) {\n        return text;\n    }\n    del({ text }) {\n        return text;\n    }\n    html({ text }) {\n        return text;\n    }\n    text({ text }) {\n        return text;\n    }\n    link({ text }) {\n        return '' + text;\n    }\n    image({ text }) {\n        return '' + text;\n    }\n    br() {\n        return '';\n    }\n}\n","import { _Renderer } from './Renderer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { _defaults } from './defaults.ts';\n/**\n * Parsing & Compiling\n */\nexport class _Parser {\n    options;\n    renderer;\n    textRenderer;\n    constructor(options) {\n        this.options = options || _defaults;\n        this.options.renderer = this.options.renderer || new _Renderer();\n        this.renderer = this.options.renderer;\n        this.renderer.options = this.options;\n        this.renderer.parser = this;\n        this.textRenderer = new _TextRenderer();\n    }\n    /**\n     * Static Parse Method\n     */\n    static parse(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parse(tokens);\n    }\n    /**\n     * Static Parse Inline Method\n     */\n    static parseInline(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parseInline(tokens);\n    }\n    /**\n     * Parse Loop\n     */\n    parse(tokens, top = true) {\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const anyToken = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions?.renderers?.[anyToken.type]) {\n                const genericToken = anyToken;\n                const ret = this.options.extensions.renderers[genericToken.type].call({ parser: this }, genericToken);\n                if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(genericToken.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            const token = anyToken;\n            switch (token.type) {\n                case 'space': {\n                    out += this.renderer.space(token);\n                    continue;\n                }\n                case 'hr': {\n                    out += this.renderer.hr(token);\n                    continue;\n                }\n                case 'heading': {\n                    out += this.renderer.heading(token);\n                    continue;\n                }\n                case 'code': {\n                    out += this.renderer.code(token);\n                    continue;\n                }\n                case 'table': {\n                    out += this.renderer.table(token);\n                    continue;\n                }\n                case 'blockquote': {\n                    out += this.renderer.blockquote(token);\n                    continue;\n                }\n                case 'list': {\n                    out += this.renderer.list(token);\n                    continue;\n                }\n                case 'html': {\n                    out += this.renderer.html(token);\n                    continue;\n                }\n                case 'paragraph': {\n                    out += this.renderer.paragraph(token);\n                    continue;\n                }\n                case 'text': {\n                    let textToken = token;\n                    let body = this.renderer.text(textToken);\n                    while (i + 1 < tokens.length && tokens[i + 1].type === 'text') {\n                        textToken = tokens[++i];\n                        body += '\\n' + this.renderer.text(textToken);\n                    }\n                    if (top) {\n                        out += this.renderer.paragraph({\n                            type: 'paragraph',\n                            raw: body,\n                            text: body,\n                            tokens: [{ type: 'text', raw: body, text: body, escaped: true }],\n                        });\n                    }\n                    else {\n                        out += body;\n                    }\n                    continue;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n    /**\n     * Parse Inline Tokens\n     */\n    parseInline(tokens, renderer = this.renderer) {\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const anyToken = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions?.renderers?.[anyToken.type]) {\n                const ret = this.options.extensions.renderers[anyToken.type].call({ parser: this }, anyToken);\n                if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(anyToken.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            const token = anyToken;\n            switch (token.type) {\n                case 'escape': {\n                    out += renderer.text(token);\n                    break;\n                }\n                case 'html': {\n                    out += renderer.html(token);\n                    break;\n                }\n                case 'link': {\n                    out += renderer.link(token);\n                    break;\n                }\n                case 'image': {\n                    out += renderer.image(token);\n                    break;\n                }\n                case 'strong': {\n                    out += renderer.strong(token);\n                    break;\n                }\n                case 'em': {\n                    out += renderer.em(token);\n                    break;\n                }\n                case 'codespan': {\n                    out += renderer.codespan(token);\n                    break;\n                }\n                case 'br': {\n                    out += renderer.br(token);\n                    break;\n                }\n                case 'del': {\n                    out += renderer.del(token);\n                    break;\n                }\n                case 'text': {\n                    out += renderer.text(token);\n                    break;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n}\n","import { _defaults } from './defaults.ts';\nimport { _Lexer } from './Lexer.ts';\nimport { _Parser } from './Parser.ts';\nexport class _Hooks {\n    options;\n    block;\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    static passThroughHooks = new Set([\n        'preprocess',\n        'postprocess',\n        'processAllTokens',\n    ]);\n    /**\n     * Process markdown before marked\n     */\n    preprocess(markdown) {\n        return markdown;\n    }\n    /**\n     * Process HTML after marked is finished\n     */\n    postprocess(html) {\n        return html;\n    }\n    /**\n     * Process all tokens before walk tokens\n     */\n    processAllTokens(tokens) {\n        return tokens;\n    }\n    /**\n     * Provide function to tokenize markdown\n     */\n    provideLexer() {\n        return this.block ? _Lexer.lex : _Lexer.lexInline;\n    }\n    /**\n     * Provide function to parse tokens\n     */\n    provideParser() {\n        return this.block ? _Parser.parse : _Parser.parseInline;\n    }\n}\n","import { _getDefaults } from './defaults.ts';\nimport { _Lexer } from './Lexer.ts';\nimport { _Parser } from './Parser.ts';\nimport { _Hooks } from './Hooks.ts';\nimport { _Renderer } from './Renderer.ts';\nimport { _Tokenizer } from './Tokenizer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { escape } from './helpers.ts';\nexport class Marked {\n    defaults = _getDefaults();\n    options = this.setOptions;\n    parse = this.parseMarkdown(true);\n    parseInline = this.parseMarkdown(false);\n    Parser = _Parser;\n    Renderer = _Renderer;\n    TextRenderer = _TextRenderer;\n    Lexer = _Lexer;\n    Tokenizer = _Tokenizer;\n    Hooks = _Hooks;\n    constructor(...args) {\n        this.use(...args);\n    }\n    /**\n     * Run callback for every token\n     */\n    walkTokens(tokens, callback) {\n        let values = [];\n        for (const token of tokens) {\n            values = values.concat(callback.call(this, token));\n            switch (token.type) {\n                case 'table': {\n                    const tableToken = token;\n                    for (const cell of tableToken.header) {\n                        values = values.concat(this.walkTokens(cell.tokens, callback));\n                    }\n                    for (const row of tableToken.rows) {\n                        for (const cell of row) {\n                            values = values.concat(this.walkTokens(cell.tokens, callback));\n                        }\n                    }\n                    break;\n                }\n                case 'list': {\n                    const listToken = token;\n                    values = values.concat(this.walkTokens(listToken.items, callback));\n                    break;\n                }\n                default: {\n                    const genericToken = token;\n                    if (this.defaults.extensions?.childTokens?.[genericToken.type]) {\n                        this.defaults.extensions.childTokens[genericToken.type].forEach((childTokens) => {\n                            const tokens = genericToken[childTokens].flat(Infinity);\n                            values = values.concat(this.walkTokens(tokens, callback));\n                        });\n                    }\n                    else if (genericToken.tokens) {\n                        values = values.concat(this.walkTokens(genericToken.tokens, callback));\n                    }\n                }\n            }\n        }\n        return values;\n    }\n    use(...args) {\n        const extensions = this.defaults.extensions || { renderers: {}, childTokens: {} };\n        args.forEach((pack) => {\n            // copy options to new object\n            const opts = { ...pack };\n            // set async to true if it was set to true before\n            opts.async = this.defaults.async || opts.async || false;\n            // ==-- Parse \"addon\" extensions --== //\n            if (pack.extensions) {\n                pack.extensions.forEach((ext) => {\n                    if (!ext.name) {\n                        throw new Error('extension name required');\n                    }\n                    if ('renderer' in ext) { // Renderer extensions\n                        const prevRenderer = extensions.renderers[ext.name];\n                        if (prevRenderer) {\n                            // Replace extension with func to run new extension but fall back if false\n                            extensions.renderers[ext.name] = function (...args) {\n                                let ret = ext.renderer.apply(this, args);\n                                if (ret === false) {\n                                    ret = prevRenderer.apply(this, args);\n                                }\n                                return ret;\n                            };\n                        }\n                        else {\n                            extensions.renderers[ext.name] = ext.renderer;\n                        }\n                    }\n                    if ('tokenizer' in ext) { // Tokenizer Extensions\n                        if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n                            throw new Error(\"extension level must be 'block' or 'inline'\");\n                        }\n                        const extLevel = extensions[ext.level];\n                        if (extLevel) {\n                            extLevel.unshift(ext.tokenizer);\n                        }\n                        else {\n                            extensions[ext.level] = [ext.tokenizer];\n                        }\n                        if (ext.start) { // Function to check for start of token\n                            if (ext.level === 'block') {\n                                if (extensions.startBlock) {\n                                    extensions.startBlock.push(ext.start);\n                                }\n                                else {\n                                    extensions.startBlock = [ext.start];\n                                }\n                            }\n                            else if (ext.level === 'inline') {\n                                if (extensions.startInline) {\n                                    extensions.startInline.push(ext.start);\n                                }\n                                else {\n                                    extensions.startInline = [ext.start];\n                                }\n                            }\n                        }\n                    }\n                    if ('childTokens' in ext && ext.childTokens) { // Child tokens to be visited by walkTokens\n                        extensions.childTokens[ext.name] = ext.childTokens;\n                    }\n                });\n                opts.extensions = extensions;\n            }\n            // ==-- Parse \"overwrite\" extensions --== //\n            if (pack.renderer) {\n                const renderer = this.defaults.renderer || new _Renderer(this.defaults);\n                for (const prop in pack.renderer) {\n                    if (!(prop in renderer)) {\n                        throw new Error(`renderer '${prop}' does not exist`);\n                    }\n                    if (['options', 'parser'].includes(prop)) {\n                        // ignore options property\n                        continue;\n                    }\n                    const rendererProp = prop;\n                    const rendererFunc = pack.renderer[rendererProp];\n                    const prevRenderer = renderer[rendererProp];\n                    // Replace renderer with func to run extension, but fall back if false\n                    renderer[rendererProp] = (...args) => {\n                        let ret = rendererFunc.apply(renderer, args);\n                        if (ret === false) {\n                            ret = prevRenderer.apply(renderer, args);\n                        }\n                        return ret || '';\n                    };\n                }\n                opts.renderer = renderer;\n            }\n            if (pack.tokenizer) {\n                const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);\n                for (const prop in pack.tokenizer) {\n                    if (!(prop in tokenizer)) {\n                        throw new Error(`tokenizer '${prop}' does not exist`);\n                    }\n                    if (['options', 'rules', 'lexer'].includes(prop)) {\n                        // ignore options, rules, and lexer properties\n                        continue;\n                    }\n                    const tokenizerProp = prop;\n                    const tokenizerFunc = pack.tokenizer[tokenizerProp];\n                    const prevTokenizer = tokenizer[tokenizerProp];\n                    // Replace tokenizer with func to run extension, but fall back if false\n                    // @ts-expect-error cannot type tokenizer function dynamically\n                    tokenizer[tokenizerProp] = (...args) => {\n                        let ret = tokenizerFunc.apply(tokenizer, args);\n                        if (ret === false) {\n                            ret = prevTokenizer.apply(tokenizer, args);\n                        }\n                        return ret;\n                    };\n                }\n                opts.tokenizer = tokenizer;\n            }\n            // ==-- Parse Hooks extensions --== //\n            if (pack.hooks) {\n                const hooks = this.defaults.hooks || new _Hooks();\n                for (const prop in pack.hooks) {\n                    if (!(prop in hooks)) {\n                        throw new Error(`hook '${prop}' does not exist`);\n                    }\n                    if (['options', 'block'].includes(prop)) {\n                        // ignore options and block properties\n                        continue;\n                    }\n                    const hooksProp = prop;\n                    const hooksFunc = pack.hooks[hooksProp];\n                    const prevHook = hooks[hooksProp];\n                    if (_Hooks.passThroughHooks.has(prop)) {\n                        // @ts-expect-error cannot type hook function dynamically\n                        hooks[hooksProp] = (arg) => {\n                            if (this.defaults.async) {\n                                return Promise.resolve(hooksFunc.call(hooks, arg)).then(ret => {\n                                    return prevHook.call(hooks, ret);\n                                });\n                            }\n                            const ret = hooksFunc.call(hooks, arg);\n                            return prevHook.call(hooks, ret);\n                        };\n                    }\n                    else {\n                        // @ts-expect-error cannot type hook function dynamically\n                        hooks[hooksProp] = (...args) => {\n                            let ret = hooksFunc.apply(hooks, args);\n                            if (ret === false) {\n                                ret = prevHook.apply(hooks, args);\n                            }\n                            return ret;\n                        };\n                    }\n                }\n                opts.hooks = hooks;\n            }\n            // ==-- Parse WalkTokens extensions --== //\n            if (pack.walkTokens) {\n                const walkTokens = this.defaults.walkTokens;\n                const packWalktokens = pack.walkTokens;\n                opts.walkTokens = function (token) {\n                    let values = [];\n                    values.push(packWalktokens.call(this, token));\n                    if (walkTokens) {\n                        values = values.concat(walkTokens.call(this, token));\n                    }\n                    return values;\n                };\n            }\n            this.defaults = { ...this.defaults, ...opts };\n        });\n        return this;\n    }\n    setOptions(opt) {\n        this.defaults = { ...this.defaults, ...opt };\n        return this;\n    }\n    lexer(src, options) {\n        return _Lexer.lex(src, options ?? this.defaults);\n    }\n    parser(tokens, options) {\n        return _Parser.parse(tokens, options ?? this.defaults);\n    }\n    parseMarkdown(blockType) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const parse = (src, options) => {\n            const origOpt = { ...options };\n            const opt = { ...this.defaults, ...origOpt };\n            const throwError = this.onError(!!opt.silent, !!opt.async);\n            // throw error if an extension set async to true but parse was called with async: false\n            if (this.defaults.async === true && origOpt.async === false) {\n                return throwError(new Error('marked(): The async option was set to true by an extension. Remove async: false from the parse options object to return a Promise.'));\n            }\n            // throw error in case of non string input\n            if (typeof src === 'undefined' || src === null) {\n                return throwError(new Error('marked(): input parameter is undefined or null'));\n            }\n            if (typeof src !== 'string') {\n                return throwError(new Error('marked(): input parameter is of type '\n                    + Object.prototype.toString.call(src) + ', string expected'));\n            }\n            if (opt.hooks) {\n                opt.hooks.options = opt;\n                opt.hooks.block = blockType;\n            }\n            const lexer = opt.hooks ? opt.hooks.provideLexer() : (blockType ? _Lexer.lex : _Lexer.lexInline);\n            const parser = opt.hooks ? opt.hooks.provideParser() : (blockType ? _Parser.parse : _Parser.parseInline);\n            if (opt.async) {\n                return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src)\n                    .then(src => lexer(src, opt))\n                    .then(tokens => opt.hooks ? opt.hooks.processAllTokens(tokens) : tokens)\n                    .then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens)\n                    .then(tokens => parser(tokens, opt))\n                    .then(html => opt.hooks ? opt.hooks.postprocess(html) : html)\n                    .catch(throwError);\n            }\n            try {\n                if (opt.hooks) {\n                    src = opt.hooks.preprocess(src);\n                }\n                let tokens = lexer(src, opt);\n                if (opt.hooks) {\n                    tokens = opt.hooks.processAllTokens(tokens);\n                }\n                if (opt.walkTokens) {\n                    this.walkTokens(tokens, opt.walkTokens);\n                }\n                let html = parser(tokens, opt);\n                if (opt.hooks) {\n                    html = opt.hooks.postprocess(html);\n                }\n                return html;\n            }\n            catch (e) {\n                return throwError(e);\n            }\n        };\n        return parse;\n    }\n    onError(silent, async) {\n        return (e) => {\n            e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n            if (silent) {\n                const msg = '<p>An error occurred:</p><pre>'\n                    + escape(e.message + '', true)\n                    + '</pre>';\n                if (async) {\n                    return Promise.resolve(msg);\n                }\n                return msg;\n            }\n            if (async) {\n                return Promise.reject(e);\n            }\n            throw e;\n        };\n    }\n}\n","import { _Lexer } from './Lexer.ts';\nimport { _Parser } from './Parser.ts';\nimport { _Tokenizer } from './Tokenizer.ts';\nimport { _Renderer } from './Renderer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { _Hooks } from './Hooks.ts';\nimport { Marked } from './Instance.ts';\nimport { _getDefaults, changeDefaults, _defaults, } from './defaults.ts';\nconst markedInstance = new Marked();\nexport function marked(src, opt) {\n    return markedInstance.parse(src, opt);\n}\n/**\n * Sets the default options.\n *\n * @param options Hash of options\n */\nmarked.options =\n    marked.setOptions = function (options) {\n        markedInstance.setOptions(options);\n        marked.defaults = markedInstance.defaults;\n        changeDefaults(marked.defaults);\n        return marked;\n    };\n/**\n * Gets the original marked default options.\n */\nmarked.getDefaults = _getDefaults;\nmarked.defaults = _defaults;\n/**\n * Use Extension\n */\nmarked.use = function (...args) {\n    markedInstance.use(...args);\n    marked.defaults = markedInstance.defaults;\n    changeDefaults(marked.defaults);\n    return marked;\n};\n/**\n * Run callback for every token\n */\nmarked.walkTokens = function (tokens, callback) {\n    return markedInstance.walkTokens(tokens, callback);\n};\n/**\n * Compiles markdown to HTML without enclosing `p` tag.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options\n * @return String of compiled HTML\n */\nmarked.parseInline = markedInstance.parseInline;\n/**\n * Expose\n */\nmarked.Parser = _Parser;\nmarked.parser = _Parser.parse;\nmarked.Renderer = _Renderer;\nmarked.TextRenderer = _TextRenderer;\nmarked.Lexer = _Lexer;\nmarked.lexer = _Lexer.lex;\nmarked.Tokenizer = _Tokenizer;\nmarked.Hooks = _Hooks;\nmarked.parse = marked;\nexport const options = marked.options;\nexport const setOptions = marked.setOptions;\nexport const use = marked.use;\nexport const walkTokens = marked.walkTokens;\nexport const parseInline = marked.parseInline;\nexport const parse = marked;\nexport const parser = _Parser.parse;\nexport const lexer = _Lexer.lex;\nexport { _defaults as defaults, _getDefaults as getDefaults } from './defaults.ts';\nexport { _Lexer as Lexer } from './Lexer.ts';\nexport { _Parser as Parser } from './Parser.ts';\nexport { _Tokenizer as Tokenizer } from './Tokenizer.ts';\nexport { _Renderer as Renderer } from './Renderer.ts';\nexport { _TextRenderer as TextRenderer } from './TextRenderer.ts';\nexport { _Hooks as Hooks } from './Hooks.ts';\nexport { Marked } from './Instance.ts';\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}